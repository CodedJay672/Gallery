/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n={703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=Symbol.for("react.element"),S=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),O=Symbol.for("react.provider"),T=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),R=Symbol.for("react.suspense"),L=Symbol.for("react.suspense_list"),_=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var D=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var M=Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=M&&e[M]||e["@@iterator"])?e:null}var j,z=Object.assign;function A(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var F=!1;function U(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var u="\n"+o[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?A(e):""}function B(e){switch(e.tag){case 5:return A(e.type);case 16:return A("Lazy");case 13:return A("Suspense");case 19:return A("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case S:return"Portal";case C:return"Profiler";case k:return"StrictMode";case R:return"Suspense";case L:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case T:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case _:return null!==(t=e.displayName||null)?t:$(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(t);case 8:return t===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return z({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function G(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){G(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Y(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return z({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function ae(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=z({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,xe=null,ke=null;function Ce(e){if(e=wo(e)){if("function"!=typeof Se)throw Error(a(280));var t=e.stateNode;t&&(t=So(t),Se(e.stateNode,e.type,t))}}function Oe(e){xe?ke?ke.push(e):ke=[e]:xe=e}function Te(){if(xe){var e=xe,t=ke;if(ke=xe=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Pe(e,t){return e(t)}function Re(){}var Le=!1;function _e(e,t,n){if(Le)return e(t,n);Le=!0;try{return Pe(e,t,n)}finally{Le=!1,(null!==xe||null!==ke)&&(Re(),Te())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var r=So(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var De=!1;if(c)try{var Me={};Object.defineProperty(Me,"passive",{get:function(){De=!0}}),window.addEventListener("test",Me,Me),window.removeEventListener("test",Me,Me)}catch(ce){De=!1}function Ie(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var je=!1,ze=null,Ae=!1,Fe=null,Ue={onError:function(e){je=!0,ze=e}};function Be(e,t,n,r,o,a,i,l,u){je=!1,ze=null,Ie.apply(Ue,arguments)}function $e(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if($e(e)!==e)throw Error(a(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=$e(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ve(o),e;if(i===r)return Ve(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Qe(e):null}function Qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Qe(e);if(null!==t)return t;e=e.sibling}return null}var qe=o.unstable_scheduleCallback,Ye=o.unstable_cancelCallback,Ke=o.unstable_shouldYield,Xe=o.unstable_requestPaint,Ge=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Ze=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=dt(l):0!=(a&=i)&&(r=dt(a))}else 0!=(i=n&~o)?r=dt(i):0!==a&&(r=dt(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var Et,St,xt,kt,Ct,Ot=!1,Tt=[],Pt=null,Rt=null,Lt=null,_t=new Map,Nt=new Map,Dt=[],Mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function It(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Rt=null;break;case"mouseover":case"mouseout":Lt=null;break;case"pointerover":case"pointerout":_t.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Nt.delete(t.pointerId)}}function jt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&St(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function zt(e){var t=bo(e.target);if(null!==t){var n=$e(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void Ct(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function At(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&St(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){At(e)&&n.delete(t)}function Ut(){Ot=!1,null!==Pt&&At(Pt)&&(Pt=null),null!==Rt&&At(Rt)&&(Rt=null),null!==Lt&&At(Lt)&&(Lt=null),_t.forEach(Ft),Nt.forEach(Ft)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,Ot||(Ot=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ut)))}function $t(e){function t(t){return Bt(t,e)}if(0<Tt.length){Bt(Tt[0],e);for(var n=1;n<Tt.length;n++){var r=Tt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&Bt(Pt,e),null!==Rt&&Bt(Rt,e),null!==Lt&&Bt(Lt,e),_t.forEach(t),Nt.forEach(t),n=0;n<Dt.length;n++)(r=Dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Dt.length&&null===(n=Dt[0]).blockedOn;)zt(n),null===n.blockedOn&&Dt.shift()}var Wt=w.ReactCurrentBatchConfig,Vt=!0;function Ht(e,t,n,r){var o=bt,a=Wt.transition;Wt.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=o,Wt.transition=a}}function Qt(e,t,n,r){var o=bt,a=Wt.transition;Wt.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=o,Wt.transition=a}}function qt(e,t,n,r){if(Vt){var o=Kt(e,t,n,r);if(null===o)Vr(e,t,r,Yt,n),It(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Pt=jt(Pt,e,t,n,r,o),!0;case"dragenter":return Rt=jt(Rt,e,t,n,r,o),!0;case"mouseover":return Lt=jt(Lt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return _t.set(a,jt(_t.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Nt.set(a,jt(Nt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(It(e,r),4&t&&-1<Mt.indexOf(e)){for(;null!==o;){var a=wo(o);if(null!==a&&Et(a),null===(a=Kt(e,t,n,r))&&Vr(e,t,r,Yt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Yt=null;function Kt(e,t,n,r){if(Yt=null,null!==(e=bo(e=Ee(r))))if(null===(t=$e(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Yt=e,null}function Xt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Gt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,o="value"in Gt?Gt.value:Gt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Zt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return z(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(sn),dn=z({},sn,{view:0,detail:0}),fn=on(dn),pn=z({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(z({},pn,{dataTransfer:0})),vn=on(z({},dn,{relatedTarget:0})),yn=on(z({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=z({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),wn=on(z({},sn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function Cn(){return kn}var On=z({},dn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Tn=on(On),Pn=on(z({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Rn=on(z({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),Ln=on(z({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),_n=z({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=on(_n),Dn=[9,13,27,32],Mn=c&&"CompositionEvent"in window,In=null;c&&"documentMode"in document&&(In=document.documentMode);var jn=c&&"TextEvent"in window&&!In,zn=c&&(!Mn||In&&8<In&&11>=In),An=String.fromCharCode(32),Fn=!1;function Un(e,t){switch(e){case"keyup":return-1!==Dn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $n=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Hn(e,t,n,r){Oe(r),0<(t=Qr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Qn=null,qn=null;function Yn(e){Ar(e,0)}function Kn(e){if(q(Eo(e)))return e}function Xn(e,t){if("change"===e)return t}var Gn=!1;if(c){var Jn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Gn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Qn&&(Qn.detachEvent("onpropertychange",nr),qn=Qn=null)}function nr(e){if("value"===e.propertyName&&Kn(qn)){var t=[];Hn(t,qn,e,Ee(e)),_e(Yn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(qn)}function ar(e,t){if("click"===e)return Kn(t)}function ir(e,t){if("input"===e||"change"===e)return Kn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!d.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=Y();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Y((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=cr(n,a);var i=cr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==Y(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=Qr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function Er(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Sr={animationend:Er("Animation","AnimationEnd"),animationiteration:Er("Animation","AnimationIteration"),animationstart:Er("Animation","AnimationStart"),transitionend:Er("Transition","TransitionEnd")},xr={},kr={};function Cr(e){if(xr[e])return xr[e];if(!Sr[e])return e;var t,n=Sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in kr)return xr[e]=n[t];return e}c&&(kr=document.createElement("div").style,"AnimationEvent"in window||(delete Sr.animationend.animation,delete Sr.animationiteration.animation,delete Sr.animationstart.animation),"TransitionEvent"in window||delete Sr.transitionend.transition);var Or=Cr("animationend"),Tr=Cr("animationiteration"),Pr=Cr("animationstart"),Rr=Cr("transitionend"),Lr=new Map,_r="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Nr(e,t){Lr.set(e,t),u(t,[e])}for(var Dr=0;Dr<_r.length;Dr++){var Mr=_r[Dr];Nr(Mr.toLowerCase(),"on"+(Mr[0].toUpperCase()+Mr.slice(1)))}Nr(Or,"onAnimationEnd"),Nr(Tr,"onAnimationIteration"),Nr(Pr,"onAnimationStart"),Nr("dblclick","onDoubleClick"),Nr("focusin","onFocus"),Nr("focusout","onBlur"),Nr(Rr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),jr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function zr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,s){if(Be.apply(this,arguments),je){if(!je)throw Error(a(198));var c=ze;je=!1,ze=null,Ae||(Ae=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function Ar(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;zr(o,l,s),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;zr(o,l,s),a=u}}}if(Ae)throw e=Fe,Ae=!1,Fe=null,e}function Fr(e,t){var n=t[vo];void 0===n&&(n=t[vo]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function Ur(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var Br="_reactListening"+Math.random().toString(36).slice(2);function $r(e){if(!e[Br]){e[Br]=!0,i.forEach((function(t){"selectionchange"!==t&&(jr.has(t)||Ur(t,!1,e),Ur(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Br]||(t[Br]=!0,Ur("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Xt(t)){case 1:var o=Ht;break;case 4:o=Qt;break;default:o=qt}n=o.bind(null,t,n,e),o=void 0,!De||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}_e((function(){var r=a,o=Ee(n),i=[];e:{var l=Lr.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Tn;break;case"focusin":s="focus",u=vn;break;case"focusout":s="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Rn;break;case Or:case Tr:case Pr:u=yn;break;case Rr:u=Ln;break;case"scroll":u=fn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=Ne(h,f))&&c.push(Hr(h,m,p))),d)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!bo(s)&&!s[mo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?bo(s):null)&&(s!==(d=$e(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==u?l:Eo(u),p=null==s?l:Eo(s),(l=new c(m,h+"leave",u,n,o)).target=d,l.relatedTarget=p,m=null,bo(o)===r&&((c=new c(f,h+"enter",s,n,o)).target=p,c.relatedTarget=d,m=c),d=m,u&&s)e:{for(f=s,h=0,p=c=u;p;p=qr(p))h++;for(p=0,m=f;m;m=qr(m))p++;for(;0<h-p;)c=qr(c),h--;for(;0<p-h;)f=qr(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=qr(c),f=qr(f)}c=null}else c=null;null!==u&&Yr(i,l,u,c,!1),null!==s&&null!==d&&Yr(i,d,s,c,!0)}if("select"===(u=(l=r?Eo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Xn;else if(Vn(l))if(Gn)v=ir;else{v=or;var y=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=ar);switch(v&&(v=v(e,r))?Hn(i,v,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&ee(l,"number",l.value)),y=r?Eo(r):window,e){case"focusin":(Vn(y)||"true"===y.contentEditable)&&(vr=y,yr=r,gr=null);break;case"focusout":gr=yr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,o)}var g;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else $n?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(zn&&"ko"!==n.locale&&($n||"onCompositionStart"!==b?"onCompositionEnd"===b&&$n&&(g=en()):(Jt="value"in(Gt=o)?Gt.value:Gt.textContent,$n=!0)),0<(y=Qr(r,b)).length&&(b=new wn(b,e,null,n,o),i.push({event:b,listeners:y}),(g||null!==(g=Bn(n)))&&(b.data=g))),(g=jn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Fn=!0,An);case"textInput":return(e=t.data)===An&&Fn?null:e;default:return null}}(e,n):function(e,t){if($n)return"compositionend"===e||!Mn&&Un(e,t)?(e=en(),Zt=Jt=Gt=null,$n=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return zn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Qr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g)}Ar(i,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ne(e,n))&&r.unshift(Hr(e,a,o)),null!=(a=Ne(e,t))&&r.push(Hr(e,a,o))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Yr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Ne(n,a))&&i.unshift(Hr(n,u,l)):o||null!=(u=Ne(n,a))&&i.push(Hr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Kr=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Xr,"")}function Jr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(a(425))}function Zr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void $t(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);$t(t)}function so(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,vo="__reactEvents$"+fo,yo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function So(e){return e[ho]||null}var xo=[],ko=-1;function Co(e){return{current:e}}function Oo(e){0>ko||(e.current=xo[ko],xo[ko]=null,ko--)}function To(e,t){ko++,xo[ko]=e.current,e.current=t}var Po={},Ro=Co(Po),Lo=Co(!1),_o=Po;function No(e,t){var n=e.type.contextTypes;if(!n)return Po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Do(e){return null!=e.childContextTypes}function Mo(){Oo(Lo),Oo(Ro)}function Io(e,t,n){if(Ro.current!==Po)throw Error(a(168));To(Ro,t),To(Lo,n)}function jo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,W(e)||"Unknown",o));return z({},n,r)}function zo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Po,_o=Ro.current,To(Ro,e),To(Lo,Lo.current),!0}function Ao(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=jo(e,t,_o),r.__reactInternalMemoizedMergedChildContext=e,Oo(Lo),Oo(Ro),To(Ro,e)):Oo(Lo),To(Lo,n)}var Fo=null,Uo=!1,Bo=!1;function $o(e){null===Fo?Fo=[e]:Fo.push(e)}function Wo(){if(!Bo&&null!==Fo){Bo=!0;var e=0,t=bt;try{var n=Fo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Fo=null,Uo=!1}catch(t){throw null!==Fo&&(Fo=Fo.slice(e+1)),qe(Ze,Wo),t}finally{bt=t,Bo=!1}}return null}var Vo=[],Ho=0,Qo=null,qo=0,Yo=[],Ko=0,Xo=null,Go=1,Jo="";function Zo(e,t){Vo[Ho++]=qo,Vo[Ho++]=Qo,Qo=e,qo=t}function ea(e,t,n){Yo[Ko++]=Go,Yo[Ko++]=Jo,Yo[Ko++]=Xo,Xo=e;var r=Go;e=Jo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Go=1<<32-it(t)+o|n<<o|r,Jo=a+e}else Go=1<<a|n<<o|r,Jo=e}function ta(e){null!==e.return&&(Zo(e,1),ea(e,1,0))}function na(e){for(;e===Qo;)Qo=Vo[--Ho],Vo[Ho]=null,qo=Vo[--Ho],Vo[Ho]=null;for(;e===Xo;)Xo=Yo[--Ko],Yo[Ko]=null,Jo=Yo[--Ko],Yo[Ko]=null,Go=Yo[--Ko],Yo[Ko]=null}var ra=null,oa=null,aa=!1,ia=null;function la(e,t){var n=Ns(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ua(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=so(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Xo?{id:Go,overflow:Jo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ns(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function sa(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ca(e){if(aa){var t=oa;if(t){var n=t;if(!ua(e,t)){if(sa(e))throw Error(a(418));t=so(n.nextSibling);var r=ra;t&&ua(e,t)?la(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(sa(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function da(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function fa(e){if(e!==ra)return!1;if(!aa)return da(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(sa(e))throw pa(),Error(a(418));for(;t;)la(e,t),t=so(t.nextSibling)}if(da(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=so(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?so(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=so(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var va=w.ReactCurrentBatchConfig;function ya(e,t){if(e&&e.defaultProps){for(var n in t=z({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ga=Co(null),ba=null,wa=null,Ea=null;function Sa(){Ea=wa=ba=null}function xa(e){var t=ga.current;Oo(ga),e._currentValue=t}function ka(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ca(e,t){ba=e,Ea=wa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wl=!0),e.firstContext=null)}function Oa(e){var t=e._currentValue;if(Ea!==e)if(e={context:e,memoizedValue:t,next:null},null===wa){if(null===ba)throw Error(a(308));wa=e,ba.dependencies={lanes:0,firstContext:e}}else wa=wa.next=e;return t}var Ta=null;function Pa(e){null===Ta?Ta=[e]:Ta.push(e)}function Ra(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Pa(t)):(n.next=o.next,o.next=n),t.interleaved=n,La(e,r)}function La(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var _a=!1;function Na(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Da(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ma(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ia(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Ru)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,La(e,n)}return null===(o=r.interleaved)?(t.next=t,Pa(r)):(t.next=o.next,o.next=t),r.interleaved=t,La(e,n)}function ja(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function za(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Aa(e,t,n,r){var o=e.updateQueue;_a=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,s=u.next;u.next=null,null===i?a=s:i.next=s,i=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==a){var d=o.baseState;for(i=0,c=s=u=null,l=a;;){var f=l.lane,p=l.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(f=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=m.payload)?h.call(p,d,f):h))break e;d=z({},d,f);break e;case 2:_a=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(f=o.effects)?o.effects=[l]:f.push(l))}else p={eventTime:p,lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=d):c=c.next=p,i|=f;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(f=l).next,f.next=null,o.lastBaseUpdate=f,o.shared.pending=null}}if(null===c&&(u=d),o.baseState=u,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);zu|=i,e.lanes=i,e.memoizedState=d}}function Fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Ua=(new r.Component).refs;function Ba(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:z({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var $a={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ts(),o=ns(e),a=Ma(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=Ia(e,a,o))&&(rs(t,e,o,r),ja(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ts(),o=ns(e),a=Ma(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Ia(e,a,o))&&(rs(t,e,o,r),ja(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ts(),r=ns(e),o=Ma(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Ia(e,o,r))&&(rs(t,e,r,n),ja(t,e,r))}};function Wa(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,a))}function Va(e,t,n){var r=!1,o=Po,a=t.contextType;return"object"==typeof a&&null!==a?a=Oa(a):(o=Do(t)?_o:Ro.current,a=(r=null!=(r=t.contextTypes))?No(e,o):Po),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=$a,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ha(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&$a.enqueueReplaceState(t,t.state,null)}function Qa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ua,Na(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Oa(a):(a=Do(t)?_o:Ro.current,o.context=No(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Ba(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&$a.enqueueReplaceState(o,o.state,null),Aa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function qa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===Ua&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ya(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ka(e){return(0,e._init)(e._payload)}function Xa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ms(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=As(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){var a=n.type;return a===x?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===N&&Ka(a)===t.type)?((r=o(t,n.props)).ref=qa(e,t,n),r.return=e,r):((r=Is(n.type,n.key,n.props,null,e.mode,r)).ref=qa(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=js(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=As(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Is(t.type,t.key,t.props,null,e.mode,n)).ref=qa(e,null,t),n.return=e,n;case S:return(t=Fs(t,e.mode,n)).return=e,t;case N:return f(e,(0,t._init)(t._payload),n)}if(te(t)||I(t))return(t=js(t,e.mode,n,null)).return=e,t;Ya(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===o?s(e,t,n,r):null;case S:return n.key===o?c(e,t,n,r):null;case N:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||I(n))return null!==o?null:d(e,t,n,r,null);Ya(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case N:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||I(r))return d(t,e=e.get(n)||null,r,o,null);Ya(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,d=a,m=a=0,v=null;null!==d&&m<l.length;m++){d.index>m?(v=d,d=null):v=d.sibling;var y=p(o,d,l[m],u);if(null===y){null===d&&(d=v);break}e&&d&&null===y.alternate&&t(o,d),a=i(y,a,m),null===c?s=y:c.sibling=y,c=y,d=v}if(m===l.length)return n(o,d),aa&&Zo(o,m),s;if(null===d){for(;m<l.length;m++)null!==(d=f(o,l[m],u))&&(a=i(d,a,m),null===c?s=d:c.sibling=d,c=d);return aa&&Zo(o,m),s}for(d=r(o,d);m<l.length;m++)null!==(v=h(d,o,m,l[m],u))&&(e&&null!==v.alternate&&d.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v);return e&&d.forEach((function(e){return t(o,e)})),aa&&Zo(o,m),s}function v(o,l,u,s){var c=I(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var d=c=null,m=l,v=l=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,v),null===d?c=b:d.sibling=b,d=b,m=y}if(g.done)return n(o,m),aa&&Zo(o,v),c;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=f(o,g.value,s))&&(l=i(g,l,v),null===d?c=g:d.sibling=g,d=g);return aa&&Zo(o,v),c}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),l=i(g,l,v),null===d?c=g:d.sibling=g,d=g);return e&&m.forEach((function(e){return t(o,e)})),aa&&Zo(o,v),c}return function e(r,a,i,u){if("object"==typeof i&&null!==i&&i.type===x&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case E:e:{for(var s=i.key,c=a;null!==c;){if(c.key===s){if((s=i.type)===x){if(7===c.tag){n(r,c.sibling),(a=o(c,i.props.children)).return=r,r=a;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===N&&Ka(s)===c.type){n(r,c.sibling),(a=o(c,i.props)).ref=qa(r,c,i),a.return=r,r=a;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===x?((a=js(i.props.children,r.mode,u,i.key)).return=r,r=a):((u=Is(i.type,i.key,i.props,null,r.mode,u)).ref=qa(r,a,i),u.return=r,r=u)}return l(r);case S:e:{for(c=i.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Fs(i,r.mode,u)).return=r,r=a}return l(r);case N:return e(r,a,(c=i._init)(i._payload),u)}if(te(i))return m(r,a,i,u);if(I(i))return v(r,a,i,u);Ya(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=As(i,r.mode,u)).return=r,r=a),l(r)):n(r,a)}}var Ga=Xa(!0),Ja=Xa(!1),Za={},ei=Co(Za),ti=Co(Za),ni=Co(Za);function ri(e){if(e===Za)throw Error(a(174));return e}function oi(e,t){switch(To(ni,t),To(ti,e),To(ei,Za),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Oo(ei),To(ei,t)}function ai(){Oo(ei),Oo(ti),Oo(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=ue(t,e.type);t!==n&&(To(ti,e),To(ei,n))}function li(e){ti.current===e&&(Oo(ei),Oo(ti))}var ui=Co(0);function si(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ci=[];function di(){for(var e=0;e<ci.length;e++)ci[e]._workInProgressVersionPrimary=null;ci.length=0}var fi=w.ReactCurrentDispatcher,pi=w.ReactCurrentBatchConfig,hi=0,mi=null,vi=null,yi=null,gi=!1,bi=!1,wi=0,Ei=0;function Si(){throw Error(a(321))}function xi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function ki(e,t,n,r,o,i){if(hi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fi.current=null===e||null===e.memoizedState?ll:ul,e=n(r,o),bi){i=0;do{if(bi=!1,wi=0,25<=i)throw Error(a(301));i+=1,yi=vi=null,t.updateQueue=null,fi.current=sl,e=n(r,o)}while(bi)}if(fi.current=il,t=null!==vi&&null!==vi.next,hi=0,yi=vi=mi=null,gi=!1,t)throw Error(a(300));return e}function Ci(){var e=0!==wi;return wi=0,e}function Oi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===yi?mi.memoizedState=yi=e:yi=yi.next=e,yi}function Ti(){if(null===vi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=vi.next;var t=null===yi?mi.memoizedState:yi.next;if(null!==t)yi=t,vi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(vi=e).memoizedState,baseState:vi.baseState,baseQueue:vi.baseQueue,queue:vi.queue,next:null},null===yi?mi.memoizedState=yi=e:yi=yi.next=e}return yi}function Pi(e,t){return"function"==typeof t?t(e):t}function Ri(e){var t=Ti(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=vi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var u=l=null,s=null,c=i;do{var d=c.lane;if((hi&d)===d)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=f,l=r):s=s.next=f,mi.lanes|=d,zu|=d}c=c.next}while(null!==c&&c!==i);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(wl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,mi.lanes|=i,zu|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Li(e){var t=Ti(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(wl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function _i(){}function Ni(e,t){var n=mi,r=Ti(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,wl=!0),r=r.queue,Vi(Ii.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==yi&&1&yi.memoizedState.tag){if(n.flags|=2048,Fi(9,Mi.bind(null,n,r,o,t),void 0,null),null===Lu)throw Error(a(349));0!=(30&hi)||Di(n,t,o)}return o}function Di(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Mi(e,t,n,r){t.value=n,t.getSnapshot=r,ji(t)&&zi(e)}function Ii(e,t,n){return n((function(){ji(t)&&zi(e)}))}function ji(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function zi(e){var t=La(e,1);null!==t&&rs(t,e,1,-1)}function Ai(e){var t=Oi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Pi,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,mi,e),[t.memoizedState,e]}function Fi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ui(){return Ti().memoizedState}function Bi(e,t,n,r){var o=Oi();mi.flags|=e,o.memoizedState=Fi(1|t,n,void 0,void 0===r?null:r)}function $i(e,t,n,r){var o=Ti();r=void 0===r?null:r;var a=void 0;if(null!==vi){var i=vi.memoizedState;if(a=i.destroy,null!==r&&xi(r,i.deps))return void(o.memoizedState=Fi(t,n,a,r))}mi.flags|=e,o.memoizedState=Fi(1|t,n,a,r)}function Wi(e,t){return Bi(8390656,8,e,t)}function Vi(e,t){return $i(2048,8,e,t)}function Hi(e,t){return $i(4,2,e,t)}function Qi(e,t){return $i(4,4,e,t)}function qi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Yi(e,t,n){return n=null!=n?n.concat([e]):null,$i(4,4,qi.bind(null,t,e),n)}function Ki(){}function Xi(e,t){var n=Ti();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Gi(e,t){var n=Ti();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ji(e,t,n){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),mi.lanes|=n,zu|=n,e.baseState=!0),t)}function Zi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=n,pi.transition=r}}function el(){return Ti().memoizedState}function tl(e,t,n){var r=ns(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=Ra(e,t,n,r))&&(rs(n,e,r,ts()),al(n,t,r))}function nl(e,t,n){var r=ns(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i)){var u=t.interleaved;return null===u?(o.next=o,Pa(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ra(e,t,o,r))&&(rs(n,e,r,o=ts()),al(n,t,r))}}function rl(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function ol(e,t){bi=gi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function al(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var il={readContext:Oa,useCallback:Si,useContext:Si,useEffect:Si,useImperativeHandle:Si,useInsertionEffect:Si,useLayoutEffect:Si,useMemo:Si,useReducer:Si,useRef:Si,useState:Si,useDebugValue:Si,useDeferredValue:Si,useTransition:Si,useMutableSource:Si,useSyncExternalStore:Si,useId:Si,unstable_isNewReconciler:!1},ll={readContext:Oa,useCallback:function(e,t){return Oi().memoizedState=[e,void 0===t?null:t],e},useContext:Oa,useEffect:Wi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Bi(4194308,4,qi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Bi(4194308,4,e,t)},useInsertionEffect:function(e,t){return Bi(4,2,e,t)},useMemo:function(e,t){var n=Oi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Oi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Oi().memoizedState=e},useState:Ai,useDebugValue:Ki,useDeferredValue:function(e){return Oi().memoizedState=e},useTransition:function(){var e=Ai(!1),t=e[0];return e=Zi.bind(null,e[1]),Oi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mi,o=Oi();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Lu)throw Error(a(349));0!=(30&hi)||Di(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Wi(Ii.bind(null,r,i,e),[e]),r.flags|=2048,Fi(9,Mi.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Oi(),t=Lu.identifierPrefix;if(aa){var n=Jo;t=":"+t+"R"+(n=(Go&~(1<<32-it(Go)-1)).toString(32)+n),0<(n=wi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Ei++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ul={readContext:Oa,useCallback:Xi,useContext:Oa,useEffect:Vi,useImperativeHandle:Yi,useInsertionEffect:Hi,useLayoutEffect:Qi,useMemo:Gi,useReducer:Ri,useRef:Ui,useState:function(){return Ri(Pi)},useDebugValue:Ki,useDeferredValue:function(e){return Ji(Ti(),vi.memoizedState,e)},useTransition:function(){return[Ri(Pi)[0],Ti().memoizedState]},useMutableSource:_i,useSyncExternalStore:Ni,useId:el,unstable_isNewReconciler:!1},sl={readContext:Oa,useCallback:Xi,useContext:Oa,useEffect:Vi,useImperativeHandle:Yi,useInsertionEffect:Hi,useLayoutEffect:Qi,useMemo:Gi,useReducer:Li,useRef:Ui,useState:function(){return Li(Pi)},useDebugValue:Ki,useDeferredValue:function(e){var t=Ti();return null===vi?t.memoizedState=e:Ji(t,vi.memoizedState,e)},useTransition:function(){return[Li(Pi)[0],Ti().memoizedState]},useMutableSource:_i,useSyncExternalStore:Ni,useId:el,unstable_isNewReconciler:!1};function cl(e,t){try{var n="",r=t;do{n+=B(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function dl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Ma(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hu||(Hu=!0,Qu=r),fl(0,t)},n}function ml(e,t,n){(n=Ma(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){fl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){fl(0,t),"function"!=typeof r&&(null===qu?qu=new Set([this]):qu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Os.bind(null,e,t,n),t.then(e,e))}function yl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ma(-1,1)).tag=2,Ia(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=w.ReactCurrentOwner,wl=!1;function El(e,t,n,r){t.child=null===e?Ja(t,null,n,r):Ga(t,e.child,n,r)}function Sl(e,t,n,r,o){n=n.render;var a=t.ref;return Ca(t,o),r=ki(e,t,n,r,a,o),n=Ci(),null===e||wl?(aa&&n&&ta(t),t.flags|=1,El(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function xl(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Ds(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Is(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,kl(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Hl(e,t,o)}return t.flags|=1,(e=Ms(a,r)).ref=t.ref,e.return=t,t.child=e}function kl(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(ur(a,r)&&e.ref===t.ref){if(wl=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Hl(e,t,o);0!=(131072&e.flags)&&(wl=!0)}}return Tl(e,t,n,r,o)}function Cl(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},To(Mu,Du),Du|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,To(Mu,Du),Du|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,To(Mu,Du),Du|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,To(Mu,Du),Du|=r;return El(e,t,o,n),t.child}function Ol(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Tl(e,t,n,r,o){var a=Do(n)?_o:Ro.current;return a=No(t,a),Ca(t,o),n=ki(e,t,n,r,a,o),r=Ci(),null===e||wl?(aa&&r&&ta(t),t.flags|=1,El(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Pl(e,t,n,r,o){if(Do(n)){var a=!0;zo(t)}else a=!1;if(Ca(t,o),null===t.stateNode)Vl(e,t),Va(t,n,r),Qa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?Oa(s):No(t,s=Do(n)?_o:Ro.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&Ha(t,i,r,s),_a=!1;var f=t.memoizedState;i.state=f,Aa(t,r,i,o),u=t.memoizedState,l!==r||f!==u||Lo.current||_a?("function"==typeof c&&(Ba(t,n,c,r),u=t.memoizedState),(l=_a||Wa(t,n,l,r,f,u,s))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Da(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:ya(t.type,l),i.props=s,d=t.pendingProps,f=i.context,u="object"==typeof(u=n.contextType)&&null!==u?Oa(u):No(t,u=Do(n)?_o:Ro.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||f!==u)&&Ha(t,i,r,u),_a=!1,f=t.memoizedState,i.state=f,Aa(t,r,i,o);var h=t.memoizedState;l!==d||f!==h||Lo.current||_a?("function"==typeof p&&(Ba(t,n,p,r),h=t.memoizedState),(s=_a||Wa(t,n,s,r,f,h,u)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Rl(e,t,n,r,a,o)}function Rl(e,t,n,r,o,a){Ol(e,t);var i=0!=(128&t.flags);if(!r&&!i)return o&&Ao(t,n,!1),Hl(e,t,a);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ga(t,e.child,null,a),t.child=Ga(t,null,l,a)):El(e,t,l,a),t.memoizedState=r.state,o&&Ao(t,n,!0),t.child}function Ll(e){var t=e.stateNode;t.pendingContext?Io(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Io(0,t.context,!1),oi(e,t.containerInfo)}function _l(e,t,n,r,o){return ha(),ma(o),t.flags|=256,El(e,t,n,r),t.child}var Nl,Dl,Ml,Il,jl={dehydrated:null,treeContext:null,retryLane:0};function zl(e){return{baseLanes:e,cachePool:null,transitions:null}}function Al(e,t,n){var r,o=t.pendingProps,i=ui.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),To(ui,1&i),null===e)return ca(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=u):l=zs(u,o,0,null),e=js(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=zl(n),t.memoizedState=jl,e):Fl(t,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,Ul(e,t,l,r=dl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=zs({mode:"visible",children:r.children},o,0,null),(i=js(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Ga(t,e.child,null,l),t.child.memoizedState=zl(l),t.memoizedState=jl,i);if(0==(1&t.mode))return Ul(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Ul(e,t,l,r=dl(i=Error(a(419)),r,void 0))}if(u=0!=(l&e.childLanes),wl||u){if(null!==(r=Lu)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==i.retryLane&&(i.retryLane=o,La(e,o),rs(r,e,o,-1))}return vs(),Ul(e,t,l,r=dl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Ps.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=so(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(Yo[Ko++]=Go,Yo[Ko++]=Jo,Yo[Ko++]=Xo,Go=e.id,Jo=e.overflow,Xo=t),(t=Fl(t,r.children)).flags|=4096,t)}(e,t,u,o,r,i,n);if(l){l=o.fallback,u=t.mode,r=(i=e.child).sibling;var s={mode:"hidden",children:o.children};return 0==(1&u)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=s,t.deletions=null):(o=Ms(i,s)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Ms(r,l):(l=js(l,u,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?zl(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=jl,o}return e=(l=e.child).sibling,o=Ms(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Fl(e,t){return(t=zs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Ul(e,t,n,r){return null!==r&&ma(r),Ga(t,e.child,null,n),(e=Fl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Bl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ka(e.return,t,n)}function $l(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Wl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(El(e,t,r.children,n),0!=(2&(r=ui.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Bl(e,n,t);else if(19===e.tag)Bl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(To(ui,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===si(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),$l(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===si(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}$l(t,!0,n,null,a);break;case"together":$l(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ms(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ms(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ql(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ql(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Yl(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ql(t),null;case 1:case 17:return Do(t.type)&&Mo(),ql(t),null;case 3:return r=t.stateNode,ai(),Oo(Lo),Oo(Ro),di(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fa(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(ls(ia),ia=null))),Dl(e,t),ql(t),null;case 5:li(t);var o=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Ml(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return ql(t),null}if(e=ri(ei.current),fa(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(o=0;o<Ir.length;o++)Fr(Ir[o],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":X(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":oe(r,i),Fr("invalid",r)}for(var u in ge(n,i),o=null,i)if(i.hasOwnProperty(u)){var s=i[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,s,e),o=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Fr("scroll",r)}switch(n){case"input":Q(r),Z(r,i,!0);break;case"textarea":Q(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Zr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[po]=t,e[ho]=r,Nl(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),o=r;break;case"iframe":case"object":case"embed":Fr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Ir.length;o++)Fr(Ir[o],e);o=r;break;case"source":Fr("error",e),o=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),o=r;break;case"details":Fr("toggle",e),o=r;break;case"input":X(e,r),o=K(e,r),Fr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=z({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Fr("invalid",e)}for(i in ge(n,o),s=o)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?ve(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Fr("scroll",e):null!=c&&b(e,i,c,u))}switch(n){case"input":Q(e),Z(e,r,!1);break;case"textarea":Q(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return ql(t),null;case 6:if(e&&null!=t.stateNode)Il(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ri(ni.current),ri(ei.current),fa(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return ql(t),null;case 13:if(Oo(ui),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=fa(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;ql(t),i=!1}else null!==ia&&(ls(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ui.current)?0===Iu&&(Iu=3):vs())),null!==t.updateQueue&&(t.flags|=4),ql(t),null);case 4:return ai(),Dl(e,t),null===e&&$r(t.stateNode.containerInfo),ql(t),null;case 10:return xa(t.type._context),ql(t),null;case 19:if(Oo(ui),null===(i=t.memoizedState))return ql(t),null;if(r=0!=(128&t.flags),null===(u=i.rendering))if(r)Ql(i,!1);else{if(0!==Iu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=si(e))){for(t.flags|=128,Ql(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return To(ui,1&ui.current|2),t.child}e=e.sibling}null!==i.tail&&Ge()>Wu&&(t.flags|=128,r=!0,Ql(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=si(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Ql(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!aa)return ql(t),null}else 2*Ge()-i.renderingStartTime>Wu&&1073741824!==n&&(t.flags|=128,r=!0,Ql(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ge(),t.sibling=null,n=ui.current,To(ui,r?1&n|2:1&n),t):(ql(t),null);case 22:case 23:return fs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Du)&&(ql(t),6&t.subtreeFlags&&(t.flags|=8192)):ql(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Kl(e,t){switch(na(t),t.tag){case 1:return Do(t.type)&&Mo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),Oo(Lo),Oo(Ro),di(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(Oo(ui),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Oo(ui),null;case 4:return ai(),null;case 10:return xa(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Nl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Dl=function(){},Ml=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ri(ei.current);var a,i=null;switch(n){case"input":o=K(e,o),r=K(e,r),i=[];break;case"select":o=z({},o,{value:void 0}),r=z({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ge(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var u=o[c];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(a in u)!u.hasOwnProperty(a)||s&&s.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in s)s.hasOwnProperty(a)&&u[a]!==s[a]&&(n||(n={}),n[a]=s[a])}else n||(i||(i=[]),i.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Fr("scroll",e),i||u===s||(i=[])):(i=i||[]).push(c,s))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Il=function(e,t,n,r){n!==r&&(t.flags|=4)};var Xl=!1,Gl=!1,Jl="function"==typeof WeakSet?WeakSet:Set,Zl=null;function eu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Cs(e,t,n)}else n.current=null}function tu(e,t,n){try{n()}catch(n){Cs(e,t,n)}}var nu=!1;function ru(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&tu(t,n,a)}o=o.next}while(o!==r)}}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function au(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function iu(e){var t=e.alternate;null!==t&&(e.alternate=null,iu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[vo],delete t[yo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}var du=null,fu=!1;function pu(e,t,n){for(n=n.child;null!==n;)hu(e,t,n),n=n.sibling}function hu(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Gl||eu(n,t);case 6:var r=du,o=fu;du=null,pu(e,t,n),fu=o,null!==(du=r)&&(fu?(e=du,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):du.removeChild(n.stateNode));break;case 18:null!==du&&(fu?(e=du,n=n.stateNode,8===e.nodeType?uo(e.parentNode,n):1===e.nodeType&&uo(e,n),$t(e)):uo(du,n.stateNode));break;case 4:r=du,o=fu,du=n.stateNode.containerInfo,fu=!0,pu(e,t,n),du=r,fu=o;break;case 0:case 11:case 14:case 15:if(!Gl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&tu(n,t,i),o=o.next}while(o!==r)}pu(e,t,n);break;case 1:if(!Gl&&(eu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Cs(n,t,e)}pu(e,t,n);break;case 21:pu(e,t,n);break;case 22:1&n.mode?(Gl=(r=Gl)||null!==n.memoizedState,pu(e,t,n),Gl=r):pu(e,t,n);break;default:pu(e,t,n)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Jl),t.forEach((function(t){var r=Rs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function vu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:du=u.stateNode,fu=!1;break e;case 3:case 4:du=u.stateNode.containerInfo,fu=!0;break e}u=u.return}if(null===du)throw Error(a(160));hu(i,l,o),du=null,fu=!1;var s=o.alternate;null!==s&&(s.return=null),o.return=null}catch(e){Cs(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)yu(t,e),t=t.sibling}function yu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vu(t,e),gu(e),4&r){try{ru(3,e,e.return),ou(3,e)}catch(t){Cs(e,e.return,t)}try{ru(5,e,e.return)}catch(t){Cs(e,e.return,t)}}break;case 1:vu(t,e),gu(e),512&r&&null!==n&&eu(n,n.return);break;case 5:if(vu(t,e),gu(e),512&r&&null!==n&&eu(n,n.return),32&e.flags){var o=e.stateNode;try{fe(o,"")}catch(t){Cs(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===i.type&&null!=i.name&&G(o,i),be(u,l);var c=be(u,i);for(l=0;l<s.length;l+=2){var d=s[l],f=s[l+1];"style"===d?ve(o,f):"dangerouslySetInnerHTML"===d?de(o,f):"children"===d?fe(o,f):b(o,d,f,c)}switch(u){case"input":J(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){Cs(e,e.return,t)}}break;case 6:if(vu(t,e),gu(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Cs(e,e.return,t)}}break;case 3:if(vu(t,e),gu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{$t(t.containerInfo)}catch(t){Cs(e,e.return,t)}break;case 4:default:vu(t,e),gu(e);break;case 13:vu(t,e),gu(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||($u=Ge())),4&r&&mu(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Gl=(c=Gl)||d,vu(t,e),Gl=c):vu(t,e),gu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Zl=e,d=e.child;null!==d;){for(f=Zl=d;null!==Zl;){switch(h=(p=Zl).child,p.tag){case 0:case 11:case 14:case 15:ru(4,p,p.return);break;case 1:eu(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Cs(r,n,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){Su(f);continue}}null!==h?(h.return=p,Zl=h):Su(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{o=f.stateNode,c?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=f.stateNode,l=null!=(s=f.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",l))}catch(t){Cs(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){Cs(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:vu(t,e),gu(e),4&r&&mu(e);case 21:}}function gu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lu(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(fe(o,""),r.flags&=-33),cu(e,uu(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;su(e,uu(e),i);break;default:throw Error(a(161))}}catch(t){Cs(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,n){Zl=e,wu(e,t,n)}function wu(e,t,n){for(var r=0!=(1&e.mode);null!==Zl;){var o=Zl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Xl;if(!i){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Gl;l=Xl;var s=Gl;if(Xl=i,(Gl=u)&&!s)for(Zl=o;null!==Zl;)u=(i=Zl).child,22===i.tag&&null!==i.memoizedState?xu(o):null!==u?(u.return=i,Zl=u):xu(o);for(;null!==a;)Zl=a,wu(a,t,n),a=a.sibling;Zl=o,Xl=l,Gl=s}Eu(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Zl=a):Eu(e)}}function Eu(e){for(;null!==Zl;){var t=Zl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Gl||ou(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Gl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:ya(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Fa(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Fa(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&$t(f)}}}break;default:throw Error(a(163))}Gl||512&t.flags&&au(t)}catch(e){Cs(t,t.return,e)}}if(t===e){Zl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zl=n;break}Zl=t.return}}function Su(e){for(;null!==Zl;){var t=Zl;if(t===e){Zl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zl=n;break}Zl=t.return}}function xu(e){for(;null!==Zl;){var t=Zl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ou(4,t)}catch(e){Cs(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Cs(t,o,e)}}var a=t.return;try{au(t)}catch(e){Cs(t,a,e)}break;case 5:var i=t.return;try{au(t)}catch(e){Cs(t,i,e)}}}catch(e){Cs(t,t.return,e)}if(t===e){Zl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Zl=l;break}Zl=t.return}}var ku,Cu=Math.ceil,Ou=w.ReactCurrentDispatcher,Tu=w.ReactCurrentOwner,Pu=w.ReactCurrentBatchConfig,Ru=0,Lu=null,_u=null,Nu=0,Du=0,Mu=Co(0),Iu=0,ju=null,zu=0,Au=0,Fu=0,Uu=null,Bu=null,$u=0,Wu=1/0,Vu=null,Hu=!1,Qu=null,qu=null,Yu=!1,Ku=null,Xu=0,Gu=0,Ju=null,Zu=-1,es=0;function ts(){return 0!=(6&Ru)?Ge():-1!==Zu?Zu:Zu=Ge()}function ns(e){return 0==(1&e.mode)?1:0!=(2&Ru)&&0!==Nu?Nu&-Nu:null!==va.transition?(0===es&&(es=mt()),es):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Xt(e.type)}function rs(e,t,n,r){if(50<Gu)throw Gu=0,Ju=null,Error(a(185));yt(e,n,r),0!=(2&Ru)&&e===Lu||(e===Lu&&(0==(2&Ru)&&(Au|=n),4===Iu&&us(e,Nu)),os(e,r),1===n&&0===Ru&&0==(1&t.mode)&&(Wu=Ge()+500,Uo&&Wo()))}function os(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,u=o[i];-1===u?0!=(l&n)&&0==(l&r)||(o[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=ft(e,e===Lu?Nu:0);if(0===r)null!==n&&Ye(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ye(n),1===t)0===e.tag?function(e){Uo=!0,$o(e)}(ss.bind(null,e)):$o(ss.bind(null,e)),io((function(){0==(6&Ru)&&Wo()})),n=null;else{switch(wt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ls(n,as.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function as(e,t){if(Zu=-1,es=0,0!=(6&Ru))throw Error(a(327));var n=e.callbackNode;if(xs()&&e.callbackNode!==n)return null;var r=ft(e,e===Lu?Nu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=ys(e,r);else{t=r;var o=Ru;Ru|=2;var i=ms();for(Lu===e&&Nu===t||(Vu=null,Wu=Ge()+500,ps(e,t));;)try{bs();break}catch(t){hs(e,t)}Sa(),Ou.current=i,Ru=o,null!==_u?t=0:(Lu=null,Nu=0,t=Iu)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=is(e,o)),1===t)throw n=ju,ps(e,0),us(e,r),os(e,Ge()),n;if(6===t)us(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=ys(e,r))&&0!==(i=ht(e))&&(r=i,t=is(e,i)),1===t))throw n=ju,ps(e,0),us(e,r),os(e,Ge()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Ss(e,Bu,Vu);break;case 3:if(us(e,r),(130023424&r)===r&&10<(t=$u+500-Ge())){if(0!==ft(e,0))break;if(((o=e.suspendedLanes)&r)!==r){ts(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Ss.bind(null,e,Bu,Vu),t);break}Ss(e,Bu,Vu);break;case 4:if(us(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Ge()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Cu(r/1960))-r)){e.timeoutHandle=ro(Ss.bind(null,e,Bu,Vu),r);break}Ss(e,Bu,Vu);break;default:throw Error(a(329))}}}return os(e,Ge()),e.callbackNode===n?as.bind(null,e):null}function is(e,t){var n=Uu;return e.current.memoizedState.isDehydrated&&(ps(e,t).flags|=256),2!==(e=ys(e,t))&&(t=Bu,Bu=n,null!==t&&ls(t)),e}function ls(e){null===Bu?Bu=e:Bu.push.apply(Bu,e)}function us(e,t){for(t&=~Fu,t&=~Au,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function ss(e){if(0!=(6&Ru))throw Error(a(327));xs();var t=ft(e,0);if(0==(1&t))return os(e,Ge()),null;var n=ys(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=is(e,r))}if(1===n)throw n=ju,ps(e,0),us(e,t),os(e,Ge()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ss(e,Bu,Vu),os(e,Ge()),null}function cs(e,t){var n=Ru;Ru|=1;try{return e(t)}finally{0===(Ru=n)&&(Wu=Ge()+500,Uo&&Wo())}}function ds(e){null!==Ku&&0===Ku.tag&&0==(6&Ru)&&xs();var t=Ru;Ru|=1;var n=Pu.transition,r=bt;try{if(Pu.transition=null,bt=1,e)return e()}finally{bt=r,Pu.transition=n,0==(6&(Ru=t))&&Wo()}}function fs(){Du=Mu.current,Oo(Mu)}function ps(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==_u)for(n=_u.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Mo();break;case 3:ai(),Oo(Lo),Oo(Ro),di();break;case 5:li(r);break;case 4:ai();break;case 13:case 19:Oo(ui);break;case 10:xa(r.type._context);break;case 22:case 23:fs()}n=n.return}if(Lu=e,_u=e=Ms(e.current,null),Nu=Du=t,Iu=0,ju=null,Fu=Au=zu=0,Bu=Uu=null,null!==Ta){for(t=0;t<Ta.length;t++)if(null!==(r=(n=Ta[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}Ta=null}return e}function hs(e,t){for(;;){var n=_u;try{if(Sa(),fi.current=il,gi){for(var r=mi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}gi=!1}if(hi=0,yi=vi=mi=null,bi=!1,wi=0,Tu.current=null,null===n||null===n.return){Iu=1,ju=t,_u=null;break}e:{var i=e,l=n.return,u=n,s=t;if(t=Nu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,d=u,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=yl(l);if(null!==h){h.flags&=-257,gl(h,l,u,0,t),1&h.mode&&vl(i,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(s),t.updateQueue=v}else m.add(s);break e}if(0==(1&t)){vl(i,c,t),vs();break e}s=Error(a(426))}else if(aa&&1&u.mode){var y=yl(l);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),gl(y,l,u,0,t),ma(cl(s,u));break e}}i=s=cl(s,u),4!==Iu&&(Iu=2),null===Uu?Uu=[i]:Uu.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,za(i,hl(0,s,t));break e;case 1:u=s;var g=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===qu||!qu.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,za(i,ml(i,u,t));break e}}i=i.return}while(null!==i)}Es(n)}catch(e){t=e,_u===n&&null!==n&&(_u=n=n.return);continue}break}}function ms(){var e=Ou.current;return Ou.current=il,null===e?il:e}function vs(){0!==Iu&&3!==Iu&&2!==Iu||(Iu=4),null===Lu||0==(268435455&zu)&&0==(268435455&Au)||us(Lu,Nu)}function ys(e,t){var n=Ru;Ru|=2;var r=ms();for(Lu===e&&Nu===t||(Vu=null,ps(e,t));;)try{gs();break}catch(t){hs(e,t)}if(Sa(),Ru=n,Ou.current=r,null!==_u)throw Error(a(261));return Lu=null,Nu=0,Iu}function gs(){for(;null!==_u;)ws(_u)}function bs(){for(;null!==_u&&!Ke();)ws(_u)}function ws(e){var t=ku(e.alternate,e,Du);e.memoizedProps=e.pendingProps,null===t?Es(e):_u=t,Tu.current=null}function Es(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Yl(n,t,Du)))return void(_u=n)}else{if(null!==(n=Kl(n,t)))return n.flags&=32767,void(_u=n);if(null===e)return Iu=6,void(_u=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(_u=t);_u=t=e}while(null!==t);0===Iu&&(Iu=5)}function Ss(e,t,n){var r=bt,o=Pu.transition;try{Pu.transition=null,bt=1,function(e,t,n,r){do{xs()}while(null!==Ku);if(0!=(6&Ru))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Lu&&(_u=Lu=null,Nu=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Yu||(Yu=!0,Ls(tt,(function(){return xs(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Pu.transition,Pu.transition=null;var l=bt;bt=1;var u=Ru;Ru|=4,Tu.current=null,function(e,t){if(eo=Vt,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==o&&3!==f.nodeType||(u=l+o),f!==i||0!==r&&3!==f.nodeType||(s=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===o&&(u=l),p===i&&++d===r&&(s=l),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Vt=!1,Zl=t;null!==Zl;)if(e=(t=Zl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zl=e;else for(;null!==Zl;){t=Zl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,y=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:ya(t.type,v),y);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(e){Cs(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zl=e;break}Zl=t.return}m=nu,nu=!1}(e,n),yu(n,e),hr(to),Vt=!!eo,to=eo=null,e.current=n,bu(n,e,o),Xe(),Ru=u,bt=l,Pu.transition=i}else e.current=n;if(Yu&&(Yu=!1,Ku=e,Xu=o),0===(i=e.pendingLanes)&&(qu=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),os(e,Ge()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Hu)throw Hu=!1,e=Qu,Qu=null,e;0!=(1&Xu)&&0!==e.tag&&xs(),0!=(1&(i=e.pendingLanes))?e===Ju?Gu++:(Gu=0,Ju=e):Gu=0,Wo()}(e,t,n,r)}finally{Pu.transition=o,bt=r}return null}function xs(){if(null!==Ku){var e=wt(Xu),t=Pu.transition,n=bt;try{if(Pu.transition=null,bt=16>e?16:e,null===Ku)var r=!1;else{if(e=Ku,Ku=null,Xu=0,0!=(6&Ru))throw Error(a(331));var o=Ru;for(Ru|=4,Zl=e.current;null!==Zl;){var i=Zl,l=i.child;if(0!=(16&Zl.flags)){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Zl=c;null!==Zl;){var d=Zl;switch(d.tag){case 0:case 11:case 15:ru(8,d,i)}var f=d.child;if(null!==f)f.return=d,Zl=f;else for(;null!==Zl;){var p=(d=Zl).sibling,h=d.return;if(iu(d),d===c){Zl=null;break}if(null!==p){p.return=h,Zl=p;break}Zl=h}}}var m=i.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var y=v.sibling;v.sibling=null,v=y}while(null!==v)}}Zl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Zl=l;else e:for(;null!==Zl;){if(0!=(2048&(i=Zl).flags))switch(i.tag){case 0:case 11:case 15:ru(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,Zl=g;break e}Zl=i.return}}var b=e.current;for(Zl=b;null!==Zl;){var w=(l=Zl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Zl=w;else e:for(l=b;null!==Zl;){if(0!=(2048&(u=Zl).flags))try{switch(u.tag){case 0:case 11:case 15:ou(9,u)}}catch(e){Cs(u,u.return,e)}if(u===l){Zl=null;break e}var E=u.sibling;if(null!==E){E.return=u.return,Zl=E;break e}Zl=u.return}}if(Ru=o,Wo(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Pu.transition=t}}return!1}function ks(e,t,n){e=Ia(e,t=hl(0,t=cl(n,t),1),1),t=ts(),null!==e&&(yt(e,1,t),os(e,t))}function Cs(e,t,n){if(3===e.tag)ks(e,e,n);else for(;null!==t;){if(3===t.tag){ks(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qu||!qu.has(r))){t=Ia(t,e=ml(t,e=cl(n,e),1),1),e=ts(),null!==t&&(yt(t,1,e),os(t,e));break}}t=t.return}}function Os(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ts(),e.pingedLanes|=e.suspendedLanes&n,Lu===e&&(Nu&n)===n&&(4===Iu||3===Iu&&(130023424&Nu)===Nu&&500>Ge()-$u?ps(e,0):Fu|=n),os(e,t)}function Ts(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=ts();null!==(e=La(e,t))&&(yt(e,t,n),os(e,n))}function Ps(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Ts(e,n)}function Rs(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Ts(e,n)}function Ls(e,t){return qe(e,t)}function _s(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ns(e,t,n,r){return new _s(e,t,n,r)}function Ds(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ms(e,t){var n=e.alternate;return null===n?((n=Ns(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Is(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Ds(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case x:return js(n.children,o,i,t);case k:l=8,o|=8;break;case C:return(e=Ns(12,n,t,2|o)).elementType=C,e.lanes=i,e;case R:return(e=Ns(13,n,t,o)).elementType=R,e.lanes=i,e;case L:return(e=Ns(19,n,t,o)).elementType=L,e.lanes=i,e;case D:return zs(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:l=10;break e;case T:l=9;break e;case P:l=11;break e;case _:l=14;break e;case N:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ns(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function js(e,t,n,r){return(e=Ns(7,e,r,t)).lanes=n,e}function zs(e,t,n,r){return(e=Ns(22,e,r,t)).elementType=D,e.lanes=n,e.stateNode={isHidden:!1},e}function As(e,t,n){return(e=Ns(6,e,null,t)).lanes=n,e}function Fs(e,t,n){return(t=Ns(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Us(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Bs(e,t,n,r,o,a,i,l,u){return e=new Us(e,t,n,l,u),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Ns(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Na(a),e}function $s(e){if(!e)return Po;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Do(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Do(n))return jo(e,n,t)}return t}function Ws(e,t,n,r,o,a,i,l,u){return(e=Bs(n,r,!0,e,0,a,0,l,u)).context=$s(null),n=e.current,(a=Ma(r=ts(),o=ns(n))).callback=null!=t?t:null,Ia(n,a,o),e.current.lanes=o,yt(e,o,r),os(e,r),e}function Vs(e,t,n,r){var o=t.current,a=ts(),i=ns(o);return n=$s(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ma(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Ia(o,t,i))&&(rs(e,o,i,a),ja(e,o,i)),i}function Hs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Qs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qs(e,t){Qs(e,t),(e=e.alternate)&&Qs(e,t)}ku=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Lo.current)wl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wl=!1,function(e,t,n){switch(t.tag){case 3:Ll(t),ha();break;case 5:ii(t);break;case 1:Do(t.type)&&zo(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;To(ga,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(To(ui,1&ui.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Al(e,t,n):(To(ui,1&ui.current),null!==(e=Hl(e,t,n))?e.sibling:null);To(ui,1&ui.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Wl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),To(ui,ui.current),r)break;return null;case 22:case 23:return t.lanes=0,Cl(e,t,n)}return Hl(e,t,n)}(e,t,n);wl=0!=(131072&e.flags)}else wl=!1,aa&&0!=(1048576&t.flags)&&ea(t,qo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Vl(e,t),e=t.pendingProps;var o=No(t,Ro.current);Ca(t,n),o=ki(null,t,r,e,o,n);var i=Ci();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Do(r)?(i=!0,zo(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Na(t),o.updater=$a,t.stateNode=o,o._reactInternals=t,Qa(t,r,e,n),t=Rl(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),El(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Vl(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Ds(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===_)return 14}return 2}(r),e=ya(r,e),o){case 0:t=Tl(null,t,r,e,n);break e;case 1:t=Pl(null,t,r,e,n);break e;case 11:t=Sl(null,t,r,e,n);break e;case 14:t=xl(null,t,r,ya(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Tl(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 1:return r=t.type,o=t.pendingProps,Pl(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 3:e:{if(Ll(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Da(e,t),Aa(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=_l(e,t,r,n,o=cl(Error(a(423)),t));break e}if(r!==o){t=_l(e,t,r,n,o=cl(Error(a(424)),t));break e}for(oa=so(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Ja(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=Hl(e,t,n);break e}El(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&ca(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),Ol(e,t),El(e,t,l,n),t.child;case 6:return null===e&&ca(t),null;case 13:return Al(e,t,n);case 4:return oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ga(t,null,r,n):El(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Sl(e,t,r,o=t.elementType===r?o:ya(r,o),n);case 7:return El(e,t,t.pendingProps,n),t.child;case 8:case 12:return El(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,To(ga,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!Lo.current){t=Hl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=Ma(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?s.next=s:(s.next=d.next,d.next=s),c.pending=s}}i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),ka(i.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),ka(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}El(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ca(t,n),r=r(o=Oa(o)),t.flags|=1,El(e,t,r,n),t.child;case 14:return o=ya(r=t.type,t.pendingProps),xl(e,t,r,o=ya(r.type,o),n);case 15:return kl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ya(r,o),Vl(e,t),t.tag=1,Do(r)?(e=!0,zo(t)):e=!1,Ca(t,n),Va(t,r,o),Qa(t,r,o,n),Rl(null,t,r,!0,e,n);case 19:return Wl(e,t,n);case 22:return Cl(e,t,n)}throw Error(a(156,t.tag))};var Ys="function"==typeof reportError?reportError:function(e){console.error(e)};function Ks(e){this._internalRoot=e}function Xs(e){this._internalRoot=e}function Gs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zs(){}function ec(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=Hs(i);l.call(e)}}Vs(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Hs(i);a.call(e)}}var i=Ws(t,r,e,0,null,!1,0,"",Zs);return e._reactRootContainer=i,e[mo]=i.current,$r(8===e.nodeType?e.parentNode:e),ds(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Hs(u);l.call(e)}}var u=Bs(e,0,!1,null,0,!1,0,"",Zs);return e._reactRootContainer=u,e[mo]=u.current,$r(8===e.nodeType?e.parentNode:e),ds((function(){Vs(t,u,n,r)})),u}(n,t,e,o,r);return Hs(i)}Xs.prototype.render=Ks.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Vs(e,t,null,null)},Xs.prototype.unmount=Ks.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;ds((function(){Vs(null,e,null,null)})),t[mo]=null}},Xs.prototype.unstable_scheduleHydration=function(e){if(e){var t=kt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Dt.length&&0!==t&&t<Dt[n].priority;n++);Dt.splice(n,0,e),0===n&&zt(e)}},Et=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(gt(t,1|n),os(t,Ge()),0==(6&Ru)&&(Wu=Ge()+500,Wo()))}break;case 13:ds((function(){var t=La(e,1);if(null!==t){var n=ts();rs(t,e,1,n)}})),qs(e,1)}},St=function(e){if(13===e.tag){var t=La(e,134217728);null!==t&&rs(t,e,134217728,ts()),qs(e,134217728)}},xt=function(e){if(13===e.tag){var t=ns(e),n=La(e,t);null!==n&&rs(n,e,t,ts()),qs(e,t)}},kt=function(){return bt},Ct=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Se=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=So(r);if(!o)throw Error(a(90));q(r),J(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=cs,Re=ds;var tc={usingClientEntryPoint:!1,Events:[wo,Eo,So,Oe,Te,cs]},nc={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{ot=oc.inject(rc),at=oc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Gs(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Gs(e))throw Error(a(299));var n=!1,r="",o=Ys;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Bs(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,$r(8===e.nodeType?e.parentNode:e),new Ks(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return ds(e)},t.hydrate=function(e,t,n){if(!Js(t))throw Error(a(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Gs(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=Ys;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Ws(t,null,e,1,null!=n?n:null,o,0,i,l),e[mo]=t.current,$r(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Xs(t)},t.render=function(e,t,n){if(!Js(t))throw Error(a(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Js(e))throw Error(a(40));return!!e._reactRootContainer&&(ds((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=cs,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Js(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},679:(e,t,n)=>{(()=>{var t={296:(e,t,n)=>{var r=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,l=parseInt,u="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,s="object"==typeof self&&self&&self.Object===Object&&self,c=u||s||Function("return this")(),d=Object.prototype.toString,f=Math.max,p=Math.min,h=function(){return c.Date.now()};function m(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function v(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==d.call(e)}(e))return NaN;if(m(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=m(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(r,"");var n=a.test(e);return n||i.test(e)?l(e.slice(2),n?2:8):o.test(e)?NaN:+e}e.exports=function(e,t,n){var r,o,a,i,l,u,s=0,c=!1,d=!1,y=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function g(t){var n=r,a=o;return r=o=void 0,s=t,i=e.apply(a,n)}function b(e){var n=e-u;return void 0===u||n>=t||n<0||d&&e-s>=a}function w(){var e=h();if(b(e))return E(e);l=setTimeout(w,function(e){var n=t-(e-u);return d?p(n,a-(e-s)):n}(e))}function E(e){return l=void 0,y&&r?g(e):(r=o=void 0,i)}function S(){var e=h(),n=b(e);if(r=arguments,o=this,u=e,n){if(void 0===l)return function(e){return s=e,l=setTimeout(w,t),c?g(e):i}(u);if(d)return l=setTimeout(w,t),g(u)}return void 0===l&&(l=setTimeout(w,t)),i}return t=v(t)||0,m(n)&&(c=!!n.leading,a=(d="maxWait"in n)?f(v(n.maxWait)||0,t):a,y="trailing"in n?!!n.trailing:y),S.cancel=function(){void 0!==l&&clearTimeout(l),s=0,r=u=o=l=void 0},S.flush=function(){return void 0===l?i:E(h())},S}},96:(e,t,n)=>{var r="Expected a function",o=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,l=/^0o[0-7]+$/i,u=parseInt,s="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,c="object"==typeof self&&self&&self.Object===Object&&self,d=s||c||Function("return this")(),f=Object.prototype.toString,p=Math.max,h=Math.min,m=function(){return d.Date.now()};function v(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function y(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==f.call(e)}(e))return NaN;if(v(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=v(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(o,"");var n=i.test(e);return n||l.test(e)?u(e.slice(2),n?2:8):a.test(e)?NaN:+e}e.exports=function(e,t,n){var o=!0,a=!0;if("function"!=typeof e)throw new TypeError(r);return v(n)&&(o="leading"in n?!!n.leading:o,a="trailing"in n?!!n.trailing:a),function(e,t,n){var o,a,i,l,u,s,c=0,d=!1,f=!1,g=!0;if("function"!=typeof e)throw new TypeError(r);function b(t){var n=o,r=a;return o=a=void 0,c=t,l=e.apply(r,n)}function w(e){var n=e-s;return void 0===s||n>=t||n<0||f&&e-c>=i}function E(){var e=m();if(w(e))return S(e);u=setTimeout(E,function(e){var n=t-(e-s);return f?h(n,i-(e-c)):n}(e))}function S(e){return u=void 0,g&&o?b(e):(o=a=void 0,l)}function x(){var e=m(),n=w(e);if(o=arguments,a=this,s=e,n){if(void 0===u)return function(e){return c=e,u=setTimeout(E,t),d?b(e):l}(s);if(f)return u=setTimeout(E,t),b(s)}return void 0===u&&(u=setTimeout(E,t)),l}return t=y(t)||0,v(n)&&(d=!!n.leading,i=(f="maxWait"in n)?p(y(n.maxWait)||0,t):i,g="trailing"in n?!!n.trailing:g),x.cancel=function(){void 0!==u&&clearTimeout(u),c=0,o=s=a=u=void 0},x.flush=function(){return void 0===u?l:S(m())},x}(e,t,{leading:o,maxWait:t,trailing:a})}},703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"}},r={};function o(e){var n=r[e];if(void 0!==n)return n.exports;var a=r[e]={exports:{}};return t[e](a,a.exports,o),a.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};(()=>{"use strict";o.r(a),o.d(a,{LazyLoadComponent:()=>Q,LazyLoadImage:()=>re,trackWindowScroll:()=>I});const e=n(294);var t=o.n(e),r=o(697);const i=n(935);var l=o.n(i);function u(){return"undefined"!=typeof window&&"IntersectionObserver"in window&&"isIntersecting"in window.IntersectionObserverEntry.prototype}function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e,t,n){return(t=p(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,p(r.key),r)}}function p(e){var t=function(e,t){if("object"!==s(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==s(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===s(t)?t:String(t)}function h(e,t){return h=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},h(e,t)}function m(e){return m=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},m(e)}var v=function(e){e.forEach((function(e){e.isIntersecting&&e.target.onVisible()}))},y={},g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&h(e,t)}(p,e);var n,r,o,a,i=(o=p,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=m(o);if(a){var n=m(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===s(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function p(e){var t;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p),(t=i.call(this,e)).supportsObserver=!e.scrollPosition&&e.useIntersectionObserver&&u(),t.supportsObserver){var n=e.threshold;t.observer=function(e){return y[e]=y[e]||new IntersectionObserver(v,{rootMargin:e+"px"}),y[e]}(n)}return t}return n=p,r=[{key:"componentDidMount",value:function(){this.placeholder&&this.observer&&(this.placeholder.onVisible=this.props.onVisible,this.observer.observe(this.placeholder)),this.supportsObserver||this.updateVisibility()}},{key:"componentWillUnmount",value:function(){this.observer&&this.placeholder&&this.observer.unobserve(this.placeholder)}},{key:"componentDidUpdate",value:function(){this.supportsObserver||this.updateVisibility()}},{key:"getPlaceholderBoundingBox",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props.scrollPosition,t=this.placeholder.getBoundingClientRect(),n=l().findDOMNode(this.placeholder).style,r=parseInt(n.getPropertyValue("margin-left"),10)||0,o=parseInt(n.getPropertyValue("margin-top"),10)||0;return{bottom:e.y+t.bottom+o,left:e.x+t.left+r,right:e.x+t.right+r,top:e.y+t.top+o}}},{key:"isPlaceholderInViewport",value:function(){if("undefined"==typeof window||!this.placeholder)return!1;var e=this.props,t=e.scrollPosition,n=e.threshold,r=this.getPlaceholderBoundingBox(t),o=t.y+window.innerHeight,a=t.x,i=t.x+window.innerWidth,l=t.y;return Boolean(l-n<=r.bottom&&o+n>=r.top&&a-n<=r.right&&i+n>=r.left)}},{key:"updateVisibility",value:function(){this.isPlaceholderInViewport()&&this.props.onVisible()}},{key:"render",value:function(){var e=this,n=this.props,r=n.className,o=n.height,a=n.placeholder,i=n.style,l=n.width;if(a&&"function"!=typeof a.type)return t().cloneElement(a,{ref:function(t){return e.placeholder=t}});var u=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({display:"inline-block"},i);return void 0!==l&&(u.width=l),void 0!==o&&(u.height=o),t().createElement("span",{className:r,ref:function(t){return e.placeholder=t},style:u},a)}}],r&&f(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),p}(t().Component);g.propTypes={onVisible:r.PropTypes.func.isRequired,className:r.PropTypes.string,height:r.PropTypes.oneOfType([r.PropTypes.number,r.PropTypes.string]),placeholder:r.PropTypes.element,threshold:r.PropTypes.number,useIntersectionObserver:r.PropTypes.bool,scrollPosition:r.PropTypes.shape({x:r.PropTypes.number.isRequired,y:r.PropTypes.number.isRequired}),width:r.PropTypes.oneOfType([r.PropTypes.number,r.PropTypes.string])},g.defaultProps={className:"",placeholder:null,threshold:100,useIntersectionObserver:!0};const b=g;var w=o(296),E=o.n(w),S=o(96),x=o.n(S),k=function(e){var t=getComputedStyle(e,null);return t.getPropertyValue("overflow")+t.getPropertyValue("overflow-y")+t.getPropertyValue("overflow-x")};const C=function(e){if(!(e instanceof HTMLElement))return window;for(var t=e;t&&t instanceof HTMLElement;){if(/(scroll|auto)/.test(k(t)))return t;t=t.parentNode}return window};function O(e){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},O(e)}var T=["delayMethod","delayTime"];function P(){return P=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},P.apply(this,arguments)}function R(e,t){return R=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},R(e,t)}function L(e,t){if(t&&("object"===O(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _(e)}function _(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function N(e){return N=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},N(e)}var D=function(){return"undefined"==typeof window?0:window.scrollX||window.pageXOffset},M=function(){return"undefined"==typeof window?0:window.scrollY||window.pageYOffset};const I=function(e){var n=function(n){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&R(e,t)}(c,n);var r,o,a,i,s=(a=c,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=N(a);if(i){var n=N(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return L(this,e)});function c(e){var n;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(n=s.call(this,e)).useIntersectionObserver=e.useIntersectionObserver&&u(),n.useIntersectionObserver)return L(n);var r=n.onChangeScroll.bind(_(n));return"debounce"===e.delayMethod?n.delayedScroll=E()(r,e.delayTime):"throttle"===e.delayMethod&&(n.delayedScroll=x()(r,e.delayTime)),n.state={scrollPosition:{x:D(),y:M()}},n.baseComponentRef=t().createRef(),n}return r=c,(o=[{key:"componentDidMount",value:function(){this.addListeners()}},{key:"componentWillUnmount",value:function(){this.removeListeners()}},{key:"componentDidUpdate",value:function(){"undefined"==typeof window||this.useIntersectionObserver||C(l().findDOMNode(this.baseComponentRef.current))!==this.scrollElement&&(this.removeListeners(),this.addListeners())}},{key:"addListeners",value:function(){"undefined"==typeof window||this.useIntersectionObserver||(this.scrollElement=C(l().findDOMNode(this.baseComponentRef.current)),this.scrollElement.addEventListener("scroll",this.delayedScroll,{passive:!0}),window.addEventListener("resize",this.delayedScroll,{passive:!0}),this.scrollElement!==window&&window.addEventListener("scroll",this.delayedScroll,{passive:!0}))}},{key:"removeListeners",value:function(){"undefined"==typeof window||this.useIntersectionObserver||(this.scrollElement.removeEventListener("scroll",this.delayedScroll),window.removeEventListener("resize",this.delayedScroll),this.scrollElement!==window&&window.removeEventListener("scroll",this.delayedScroll))}},{key:"onChangeScroll",value:function(){this.useIntersectionObserver||this.setState({scrollPosition:{x:D(),y:M()}})}},{key:"render",value:function(){var n=this.props,r=(n.delayMethod,n.delayTime,function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(n,T)),o=this.useIntersectionObserver?null:this.state.scrollPosition;return t().createElement(e,P({forwardRef:this.baseComponentRef,scrollPosition:o},r))}}])&&function(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(o=function(e,t){if("object"!==O(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==O(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===O(o)?o:String(o)),r)}var o}(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),c}(t().Component);return n.propTypes={delayMethod:r.PropTypes.oneOf(["debounce","throttle"]),delayTime:r.PropTypes.number,useIntersectionObserver:r.PropTypes.bool},n.defaultProps={delayMethod:"throttle",delayTime:300,useIntersectionObserver:!0},n};function j(e){return j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},j(e)}function z(e,t){return z=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},z(e,t)}function A(e){return A=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},A(e)}var F=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&z(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=A(o);if(a){var n=A(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===j(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function l(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),i.call(this,e)}return n=l,(r=[{key:"render",value:function(){return t().createElement(b,this.props)}}])&&function(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(o=function(e,t){if("object"!==j(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==j(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===j(o)?o:String(o)),r)}var o}(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),l}(t().Component);const U=I(F);function B(e){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B(e)}function $(e,t){return $=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},$(e,t)}function W(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function V(e){return V=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},V(e)}var H=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&$(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=V(o);if(a){var n=V(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===B(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return W(e)}(this,e)});function l(e){var t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),t=i.call(this,e);var n=e.afterLoad,r=e.beforeLoad,o=e.scrollPosition,a=e.visibleByDefault;return t.state={visible:a},a&&(r(),n()),t.onVisible=t.onVisible.bind(W(t)),t.isScrollTracked=Boolean(o&&Number.isFinite(o.x)&&o.x>=0&&Number.isFinite(o.y)&&o.y>=0),t}return n=l,(r=[{key:"componentDidUpdate",value:function(e,t){t.visible!==this.state.visible&&this.props.afterLoad()}},{key:"onVisible",value:function(){this.props.beforeLoad(),this.setState({visible:!0})}},{key:"render",value:function(){if(this.state.visible)return this.props.children;var e=this.props,n=e.className,r=e.delayMethod,o=e.delayTime,a=e.height,i=e.placeholder,l=e.scrollPosition,s=e.style,c=e.threshold,d=e.useIntersectionObserver,f=e.width;return this.isScrollTracked||d&&u()?t().createElement(b,{className:n,height:a,onVisible:this.onVisible,placeholder:i,scrollPosition:l,style:s,threshold:c,useIntersectionObserver:d,width:f}):t().createElement(U,{className:n,delayMethod:r,delayTime:o,height:a,onVisible:this.onVisible,placeholder:i,style:s,threshold:c,width:f})}}])&&function(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(o=function(e,t){if("object"!==B(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==B(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===B(o)?o:String(o)),r)}var o}(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),l}(t().Component);H.propTypes={afterLoad:r.PropTypes.func,beforeLoad:r.PropTypes.func,useIntersectionObserver:r.PropTypes.bool,visibleByDefault:r.PropTypes.bool},H.defaultProps={afterLoad:function(){return{}},beforeLoad:function(){return{}},useIntersectionObserver:!0,visibleByDefault:!1};const Q=H;function q(e){return q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},q(e)}var Y=["afterLoad","beforeLoad","delayMethod","delayTime","effect","placeholder","placeholderSrc","scrollPosition","threshold","useIntersectionObserver","visibleByDefault","wrapperClassName","wrapperProps"];function K(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function X(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?K(Object(n),!0).forEach((function(t){G(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):K(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function G(e,t,n){return(t=Z(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function J(){return J=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},J.apply(this,arguments)}function Z(e){var t=function(e,t){if("object"!==q(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==q(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===q(t)?t:String(t)}function ee(e,t){return ee=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ee(e,t)}function te(e){return te=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},te(e)}var ne=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ee(e,t)}(l,e);var n,r,o,a,i=(o=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=te(o);if(a){var n=te(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===q(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=i.call(this,e)).state={loaded:!1},t}return n=l,(r=[{key:"onImageLoad",value:function(){var e=this;return this.state.loaded?null:function(t){e.props.onLoad(t),e.props.afterLoad(),e.setState({loaded:!0})}}},{key:"getImg",value:function(){var e=this.props,n=(e.afterLoad,e.beforeLoad,e.delayMethod,e.delayTime,e.effect,e.placeholder,e.placeholderSrc,e.scrollPosition,e.threshold,e.useIntersectionObserver,e.visibleByDefault,e.wrapperClassName,e.wrapperProps,function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,Y));return t().createElement("img",J({},n,{onLoad:this.onImageLoad()}))}},{key:"getLazyLoadImage",value:function(){var e=this.props,n=e.beforeLoad,r=e.className,o=e.delayMethod,a=e.delayTime,i=e.height,l=e.placeholder,u=e.scrollPosition,s=e.style,c=e.threshold,d=e.useIntersectionObserver,f=e.visibleByDefault,p=e.width;return t().createElement(Q,{beforeLoad:n,className:r,delayMethod:o,delayTime:a,height:i,placeholder:l,scrollPosition:u,style:s,threshold:c,useIntersectionObserver:d,visibleByDefault:f,width:p},this.getImg())}},{key:"getWrappedLazyLoadImage",value:function(e){var n=this.props,r=n.effect,o=n.height,a=n.placeholderSrc,i=n.width,l=n.wrapperClassName,u=n.wrapperProps,s=this.state.loaded,c=s?" lazy-load-image-loaded":"",d=s||!a?{}:{backgroundImage:"url(".concat(a,")"),backgroundSize:"100% 100%"};return t().createElement("span",J({className:l+" lazy-load-image-background "+r+c,style:X(X({},d),{},{color:"transparent",display:"inline-block",height:o,width:i})},u),e)}},{key:"render",value:function(){var e=this.props,t=e.effect,n=e.placeholderSrc,r=e.visibleByDefault,o=e.wrapperClassName,a=e.wrapperProps,i=this.getLazyLoadImage();return(t||n)&&!r||o||a?this.getWrappedLazyLoadImage(i):i}}])&&function(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Z(r.key),r)}}(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),l}(t().Component);ne.propTypes={onLoad:r.PropTypes.func,afterLoad:r.PropTypes.func,beforeLoad:r.PropTypes.func,delayMethod:r.PropTypes.string,delayTime:r.PropTypes.number,effect:r.PropTypes.string,placeholderSrc:r.PropTypes.string,threshold:r.PropTypes.number,useIntersectionObserver:r.PropTypes.bool,visibleByDefault:r.PropTypes.bool,wrapperClassName:r.PropTypes.string,wrapperProps:r.PropTypes.object},ne.defaultProps={onLoad:function(){},afterLoad:function(){return{}},beforeLoad:function(){return{}},delayMethod:"throttle",delayTime:300,effect:"",placeholderSrc:null,threshold:100,useIntersectionObserver:!0,visibleByDefault:!1,wrapperClassName:""};const re=ne})(),e.exports=a})()},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=y.prototype;var w=b.prototype=new g;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var E=Array.isArray,S=Object.prototype.hasOwnProperty,x={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,o)&&!k.hasOwnProperty(o)&&(a[o]=t[o]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===a[o]&&(a[o]=u[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:x.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var T=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function R(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===a?"."+P(u,0):a,E(i)?(o="",null!=e&&(o=e.replace(T,"$&/")+"/"),R(i,t,o,"",(function(e){return e}))):null!=i&&(O(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(T,"$&/")+"/")+e)),t.push(i)),1;if(u=0,a=""===a?".":a+":",E(e))for(var s=0;s<e.length;s++){var c=a+P(l=e[s],s);u+=R(l,t,o,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=R(l=l.value,t,o,c=a+P(l,s++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function L(e,t,n){if(null==e)return e;var r=[],o=0;return R(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function _(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},D={transition:null},M={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:D,ReactCurrentOwner:x};t.Children={map:L,forEach:function(e,t,n){L(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return L(e,(function(){t++})),t},toArray:function(e){return L(e,(function(e){return e}))||[]},only:function(e){if(!O(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)S.call(t,s)&&!k.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=O,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:_}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=D.transition;D.transition={};try{e()}finally{D.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>a(u,n))s<o&&0>a(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<o&&0>a(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],d=1,f=null,p=3,h=!1,m=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function E(e){if(v=!1,w(e),!m)if(null!==r(s))m=!0,D(S);else{var t=r(c);null!==t&&M(E,t.startTime-e)}}function S(e,n){m=!1,v&&(v=!1,g(O),O=-1),h=!0;var a=p;try{for(w(n),f=r(s);null!==f&&(!(f.expirationTime>n)||e&&!R());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var l=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?f.callback=l:f===r(s)&&o(s),w(n)}else o(s);f=r(s)}if(null!==f)var u=!0;else{var d=r(c);null!==d&&M(E,d.startTime-n),u=!1}return u}finally{f=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,k=!1,C=null,O=-1,T=5,P=-1;function R(){return!(t.unstable_now()-P<T)}function L(){if(null!==C){var e=t.unstable_now();P=e;var n=!0;try{n=C(!0,e)}finally{n?x():(k=!1,C=null)}}else k=!1}if("function"==typeof b)x=function(){b(L)};else if("undefined"!=typeof MessageChannel){var _=new MessageChannel,N=_.port2;_.port1.onmessage=L,x=function(){N.postMessage(null)}}else x=function(){y(L,0)};function D(e){C=e,k||(k=!0,x())}function M(e,n){O=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,D(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):T=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(c,e),null===r(s)&&e===r(c)&&(v?(g(O),O=-1):v=!0,M(E,a-i))):(e.sortIndex=l,n(s,e),m||h||(m=!0,D(S))),e},t.unstable_shouldYield=R,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={exports:{}};return n[e](a,a.exports,o),a.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,o.d(a,i),a},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e,t=o(294),n=o.t(t,2),r=o(745);function a(){return a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const i="popstate";function l(e,t){if(!1===e||null==e)throw new Error(t)}function u(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function s(e,t){return{usr:e.state,key:e.key,idx:t}}function c(e,t,n,r){return void 0===n&&(n=null),a({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?f(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function d(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function f(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var p;!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(p||(p={}));const h=new Set(["lazy","caseSensitive","path","id","index","children"]);function m(e,t,n,r){return void 0===n&&(n=[]),void 0===r&&(r={}),e.map(((e,o)=>{let i=[...n,o],u="string"==typeof e.id?e.id:i.join("-");if(l(!0!==e.index||!e.children,"Cannot specify children on an index route"),l(!r[u],'Found a route id collision on id "'+u+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let n=a({},e,t(e),{id:u});return r[u]=n,n}{let n=a({},e,t(e),{id:u,children:void 0});return r[u]=n,e.children&&(n.children=m(e.children,t,i,r)),n}}))}function v(e,t,n){void 0===n&&(n="/");let r=L(("string"==typeof t?f(t):t).pathname||"/",n);if(null==r)return null;let o=y(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=T(o[e],R(r));return a}function y(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,a)=>{let i={relativePath:void 0===a?e.path||"":a,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(l(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let u=M([r,i.relativePath]),s=n.concat(i);e.children&&e.children.length>0&&(l(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+u+'".'),y(e.children,t,s,u)),(null!=e.path||e.index)&&t.push({path:u,score:O(u,e.index),routesMeta:s})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of g(e.path))o(e,t,n);else o(e,t)})),t}function g(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),a=n.replace(/\?$/,"");if(0===r.length)return o?[a,""]:[a];let i=g(r.join("/")),l=[];return l.push(...i.map((e=>""===e?a:[a,e].join("/")))),o&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}const b=/^:\w+$/,w=3,E=2,S=1,x=10,k=-2,C=e=>"*"===e;function O(e,t){let n=e.split("/"),r=n.length;return n.some(C)&&(r+=k),t&&(r+=E),n.filter((e=>!C(e))).reduce(((e,t)=>e+(b.test(t)?w:""===t?S:x)),r)}function T(e,t){let{routesMeta:n}=e,r={},o="/",a=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,u="/"===o?t:t.slice(o.length)||"/",s=P({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},u);if(!s)return null;Object.assign(r,s.params);let c=i.route;a.push({params:r,pathname:M([o,s.pathname]),pathnameBase:I(M([o,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(o=M([o,s.pathnameBase]))}return a}function P(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),u("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,((e,t)=>(r.push(t),"/([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return u(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(l[n]||"",t),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function R(e){try{return decodeURI(e)}catch(t){return u(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function L(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function _(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function N(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function D(e,t,n,r){let o;void 0===r&&(r=!1),"string"==typeof e?o=f(e):(o=a({},e),l(!o.pathname||!o.pathname.includes("?"),_("?","pathname","search",o)),l(!o.pathname||!o.pathname.includes("#"),_("#","pathname","hash",o)),l(!o.search||!o.search.includes("#"),_("#","search","hash",o)));let i,u=""===e||""===o.pathname,s=u?"/":o.pathname;if(r||null==s)i=n;else{let e=t.length-1;if(s.startsWith("..")){let t=s.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}i=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?f(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:j(r),hash:z(o)}}(o,i),d=s&&"/"!==s&&s.endsWith("/"),p=(u||"."===s)&&n.endsWith("/");return c.pathname.endsWith("/")||!d&&!p||(c.pathname+="/"),c}const M=e=>e.join("/").replace(/\/\/+/g,"/"),I=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),j=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",z=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;class A{constructor(e,t,n,r){void 0===r&&(r=!1),this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function F(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const U=["post","put","patch","delete"],B=new Set(U),$=["get",...U],W=new Set($),V=new Set([301,302,303,307,308]),H=new Set([307,308]),Q={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},q={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},Y={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},K=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,X=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)});function G(e,t,n,r,o,a,i){let l,u;if(null!=a&&"path"!==i){l=[];for(let e of t)if(l.push(e),e.route.id===a){u=e;break}}else l=t,u=t[t.length-1];let s=D(o||".",N(l).map((e=>e.pathnameBase)),L(e.pathname,n)||e.pathname,"path"===i);return null==o&&(s.search=e.search,s.hash=e.hash),null!=o&&""!==o&&"."!==o||!u||!u.route.index||we(s.search)||(s.search=s.search?s.search.replace(/^\?/,"?index&"):"?index"),r&&"/"!==n&&(s.pathname="/"===s.pathname?n:M([n,s.pathname])),d(s)}function J(e,t,n,r){if(!r||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(r))return{path:n};if(r.formMethod&&(o=r.formMethod,!W.has(o.toLowerCase())))return{path:n,error:de(405,{method:r.formMethod})};var o;let a,i,u=()=>({path:n,error:de(400,{type:"invalid-body"})}),s=r.formMethod||"get",c=e?s.toUpperCase():s.toLowerCase(),p=pe(n);if(void 0!==r.body){if("text/plain"===r.formEncType){if(!ye(c))return u();let e="string"==typeof r.body?r.body:r.body instanceof FormData||r.body instanceof URLSearchParams?Array.from(r.body.entries()).reduce(((e,t)=>{let[n,r]=t;return""+e+n+"="+r+"\n"}),""):String(r.body);return{path:n,submission:{formMethod:c,formAction:p,formEncType:r.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===r.formEncType){if(!ye(c))return u();try{let e="string"==typeof r.body?JSON.parse(r.body):r.body;return{path:n,submission:{formMethod:c,formAction:p,formEncType:r.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return u()}}}if(l("function"==typeof FormData,"FormData is not available in this environment"),r.formData)a=ae(r.formData),i=r.formData;else if(r.body instanceof FormData)a=ae(r.body),i=r.body;else if(r.body instanceof URLSearchParams)a=r.body,i=ie(a);else if(null==r.body)a=new URLSearchParams,i=new FormData;else try{a=new URLSearchParams(r.body),i=ie(a)}catch(e){return u()}let h={formMethod:c,formAction:p,formEncType:r&&r.formEncType||"application/x-www-form-urlencoded",formData:i,json:void 0,text:void 0};if(ye(h.formMethod))return{path:n,submission:h};let m=f(n);return t&&m.search&&we(m.search)&&a.append("index",""),m.search="?"+a,{path:d(m),submission:h}}function Z(e,t,n,r,o,i,l,u,s,c,d,f,p,h){let m=h?Object.values(h)[0]:p?Object.values(p)[0]:void 0,y=e.createURL(t.location),g=e.createURL(o),b=h?Object.keys(h)[0]:void 0,w=function(e,t){let n=e;if(t){let r=e.findIndex((e=>e.route.id===t));r>=0&&(n=e.slice(0,r))}return n}(n,b).filter(((e,n)=>{if(e.route.lazy)return!0;if(null==e.route.loader)return!1;if(function(e,t,n){let r=!t||n.route.id!==t.route.id,o=void 0===e[n.route.id];return r||o}(t.loaderData,t.matches[n],e)||l.some((t=>t===e.route.id)))return!0;let o=t.matches[n],u=e;return te(e,a({currentUrl:y,currentParams:o.params,nextUrl:g,nextParams:u.params},r,{actionResult:m,defaultShouldRevalidate:i||y.pathname+y.search===g.pathname+g.search||y.search!==g.search||ee(o,u)}))})),E=[];return s.forEach(((e,o)=>{if(!n.some((t=>t.route.id===e.routeId)))return;let l=v(d,e.path,f);if(!l)return void E.push({key:o,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let s=t.fetchers.get(o),p=Ee(l,e.path),h=!1;h=!c.has(o)&&(!!u.includes(o)||(s&&"idle"!==s.state&&void 0===s.data?i:te(p,a({currentUrl:y,currentParams:t.matches[t.matches.length-1].params,nextUrl:g,nextParams:n[n.length-1].params},r,{actionResult:m,defaultShouldRevalidate:i})))),h&&E.push({key:o,routeId:e.routeId,path:e.path,matches:l,match:p,controller:new AbortController})})),[w,E]}function ee(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function te(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}async function ne(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let o=n[e.id];l(o,"No route found in manifest");let i={};for(let e in r){let t=void 0!==o[e]&&"hasErrorBoundary"!==e;u(!t,'Route "'+o.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||h.has(e)||(i[e]=r[e])}Object.assign(o,i),Object.assign(o,a({},t(o),{lazy:void 0}))}async function re(e,t,n,r,o,a,i,u){let s,c,d;void 0===u&&(u={});let f=e=>{let r,o=new Promise(((e,t)=>r=t));return d=()=>r(),t.signal.addEventListener("abort",d),Promise.race([e({request:t,params:n.params,context:u.requestContext}),o])};try{let r=n.route[e];if(n.route.lazy)if(r){let e,t=await Promise.all([f(r).catch((t=>{e=t})),ne(n.route,a,o)]);if(e)throw e;c=t[0]}else{if(await ne(n.route,a,o),r=n.route[e],!r){if("action"===e){let e=new URL(t.url),r=e.pathname+e.search;throw de(405,{method:t.method,pathname:r,routeId:n.route.id})}return{type:p.data,data:void 0}}c=await f(r)}else{if(!r){let e=new URL(t.url);throw de(404,{pathname:e.pathname+e.search})}c=await f(r)}l(void 0!==c,"You defined "+("action"===e?"an action":"a loader")+' for route "'+n.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){s=p.error,c=e}finally{d&&t.signal.removeEventListener("abort",d)}if(null!=(h=c)&&"number"==typeof h.status&&"string"==typeof h.statusText&&"object"==typeof h.headers&&void 0!==h.body){let e,o=c.status;if(V.has(o)){let e=c.headers.get("Location");if(l(e,"Redirects returned/thrown from loaders/actions must have a Location header"),K.test(e)){if(!u.isStaticRequest){let n=new URL(t.url),r=e.startsWith("//")?new URL(n.protocol+e):new URL(e),o=null!=L(r.pathname,i);r.origin===n.origin&&o&&(e=r.pathname+r.search+r.hash)}}else e=G(new URL(t.url),r.slice(0,r.indexOf(n)+1),i,!0,e);if(u.isStaticRequest)throw c.headers.set("Location",e),c;return{type:p.redirect,status:o,location:e,revalidate:null!==c.headers.get("X-Remix-Revalidate"),reloadDocument:null!==c.headers.get("X-Remix-Reload-Document")}}if(u.isRouteRequest)throw{type:s===p.error?p.error:p.data,response:c};let a=c.headers.get("Content-Type");return e=a&&/\bapplication\/json\b/.test(a)?await c.json():await c.text(),s===p.error?{type:s,error:new A(o,c.statusText,e),headers:c.headers}:{type:p.data,data:e,statusCode:c.status,headers:c.headers}}var h,m,v;return s===p.error?{type:s,error:c}:function(e){let t=e;return t&&"object"==typeof t&&"object"==typeof t.data&&"function"==typeof t.subscribe&&"function"==typeof t.cancel&&"function"==typeof t.resolveData}(c)?{type:p.deferred,deferredData:c,statusCode:null==(m=c.init)?void 0:m.status,headers:(null==(v=c.init)?void 0:v.headers)&&new Headers(c.init.headers)}:{type:p.data,data:c}}function oe(e,t,n,r){let o=e.createURL(pe(t)).toString(),a={signal:n};if(r&&ye(r.formMethod)){let{formMethod:e,formEncType:t}=r;a.method=e.toUpperCase(),"application/json"===t?(a.headers=new Headers({"Content-Type":t}),a.body=JSON.stringify(r.json)):"text/plain"===t?a.body=r.text:"application/x-www-form-urlencoded"===t&&r.formData?a.body=ae(r.formData):a.body=r.formData}return new Request(o,a)}function ae(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,"string"==typeof r?r:r.name);return t}function ie(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function le(e,t,n,r,o,i,u,s){let{loaderData:c,errors:d}=function(e,t,n,r,o){let a,i={},u=null,s=!1,c={};return n.forEach(((n,d)=>{let f=t[d].route.id;if(l(!ve(n),"Cannot handle redirect results in processLoaderData"),me(n)){let t=se(e,f),o=n.error;r&&(o=Object.values(r)[0],r=void 0),u=u||{},null==u[t.route.id]&&(u[t.route.id]=o),i[f]=void 0,s||(s=!0,a=F(n.error)?n.error.status:500),n.headers&&(c[f]=n.headers)}else he(n)?(o.set(f,n.deferredData),i[f]=n.deferredData.data):i[f]=n.data,null==n.statusCode||200===n.statusCode||s||(a=n.statusCode),n.headers&&(c[f]=n.headers)})),r&&(u=r,i[Object.keys(r)[0]]=void 0),{loaderData:i,errors:u,statusCode:a||200,loaderHeaders:c}}(t,n,r,o,s);for(let t=0;t<i.length;t++){let{key:n,match:r,controller:o}=i[t];l(void 0!==u&&void 0!==u[t],"Did not find corresponding fetcher result");let s=u[t];if(!o||!o.signal.aborted)if(me(s)){let t=se(e.matches,null==r?void 0:r.route.id);d&&d[t.route.id]||(d=a({},d,{[t.route.id]:s.error})),e.fetchers.delete(n)}else if(ve(s))l(!1,"Unhandled fetcher revalidation redirect");else if(he(s))l(!1,"Unhandled fetcher deferred data");else{let t=Ce(s.data);e.fetchers.set(n,t)}}return{loaderData:c,errors:d}}function ue(e,t,n,r){let o=a({},t);for(let a of n){let n=a.route.id;if(t.hasOwnProperty(n)?void 0!==t[n]&&(o[n]=t[n]):void 0!==e[n]&&a.route.loader&&(o[n]=e[n]),r&&r.hasOwnProperty(n))break}return o}function se(e,t){let n=t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e];return n.reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function ce(e){let t=e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function de(e,t){let{pathname:n,routeId:r,method:o,type:a}=void 0===t?{}:t,i="Unknown Server Error",l="Unknown @remix-run/router error";return 400===e?(i="Bad Request",o&&n&&r?l="You made a "+o+' request to "'+n+'" but did not provide a `loader` for route "'+r+'", so there is no way to handle the request.':"defer-action"===a?l="defer() is not supported in actions":"invalid-body"===a&&(l="Unable to encode submission body")):403===e?(i="Forbidden",l='Route "'+r+'" does not match URL "'+n+'"'):404===e?(i="Not Found",l='No route matches URL "'+n+'"'):405===e&&(i="Method Not Allowed",o&&n&&r?l="You made a "+o.toUpperCase()+' request to "'+n+'" but did not provide an `action` for route "'+r+'", so there is no way to handle the request.':o&&(l='Invalid request method "'+o.toUpperCase()+'"')),new A(e||500,i,new Error(l),!0)}function fe(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(ve(n))return{result:n,idx:t}}}function pe(e){return d(a({},"string"==typeof e?f(e):e,{hash:""}))}function he(e){return e.type===p.deferred}function me(e){return e.type===p.error}function ve(e){return(e&&e.type)===p.redirect}function ye(e){return B.has(e.toLowerCase())}async function ge(e,t,n,r,o,a){for(let i=0;i<n.length;i++){let u=n[i],s=t[i];if(!s)continue;let c=e.find((e=>e.route.id===s.route.id)),d=null!=c&&!ee(c,s)&&void 0!==(a&&a[s.route.id]);if(he(u)&&(o||d)){let e=r[i];l(e,"Expected an AbortSignal for revalidating fetcher deferred result"),await be(u,e,o).then((e=>{e&&(n[i]=e||n[i])}))}}}async function be(e,t,n){if(void 0===n&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:p.data,data:e.deferredData.unwrappedData}}catch(e){return{type:p.error,error:e}}return{type:p.data,data:e.deferredData.data}}}function we(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function Ee(e,t){let n="string"==typeof t?f(t).search:t.search;if(e[e.length-1].route.index&&we(n||""))return e[e.length-1];let r=N(e);return r[r.length-1]}function Se(e){let{formMethod:t,formAction:n,formEncType:r,text:o,formData:a,json:i}=e;if(t&&n&&r)return null!=o?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:o}:null!=a?{formMethod:t,formAction:n,formEncType:r,formData:a,json:void 0,text:void 0}:void 0!==i?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:i,text:void 0}:void 0}function xe(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function ke(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function Ce(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function Oe(){return Oe=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Oe.apply(this,arguments)}Symbol("deferred");const Te=t.createContext(null),Pe=t.createContext(null),Re=t.createContext(null),Le=t.createContext(null),_e=t.createContext({outlet:null,matches:[],isDataRoute:!1}),Ne=t.createContext(null);function De(){return null!=t.useContext(Le)}function Me(){return De()||l(!1),t.useContext(Le).location}function Ie(e){t.useContext(Re).static||t.useLayoutEffect(e)}function je(){let{isDataRoute:e}=t.useContext(_e);return e?function(){let{router:e}=function(e){let n=t.useContext(Te);return n||l(!1),n}(We.UseNavigateStable),n=Qe(Ve.UseNavigateStable),r=t.useRef(!1);Ie((()=>{r.current=!0}));let o=t.useCallback((function(t,o){void 0===o&&(o={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,Oe({fromRouteId:n},o)))}),[e,n]);return o}():function(){De()||l(!1);let e=t.useContext(Te),{basename:n,navigator:r}=t.useContext(Re),{matches:o}=t.useContext(_e),{pathname:a}=Me(),i=JSON.stringify(N(o).map((e=>e.pathnameBase))),u=t.useRef(!1);return Ie((()=>{u.current=!0})),t.useCallback((function(t,o){if(void 0===o&&(o={}),!u.current)return;if("number"==typeof t)return void r.go(t);let l=D(t,JSON.parse(i),a,"path"===o.relative);null==e&&"/"!==n&&(l.pathname="/"===l.pathname?n:M([n,l.pathname])),(o.replace?r.replace:r.push)(l,o.state,o)}),[n,r,i,a,e])}()}function ze(e,n){let{relative:r}=void 0===n?{}:n,{matches:o}=t.useContext(_e),{pathname:a}=Me(),i=JSON.stringify(N(o).map((e=>e.pathnameBase)));return t.useMemo((()=>D(e,JSON.parse(i),a,"path"===r)),[e,i,a,r])}function Ae(n,r,o){De()||l(!1);let{navigator:a}=t.useContext(Re),{matches:i}=t.useContext(_e),u=i[i.length-1],s=u?u.params:{},c=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let d,p=Me();if(r){var h;let e="string"==typeof r?f(r):r;"/"===c||(null==(h=e.pathname)?void 0:h.startsWith(c))||l(!1),d=e}else d=p;let m=d.pathname||"/",y=v(n,{pathname:"/"===c?m:m.slice(c.length)||"/"}),g=function(e,n,r){var o;if(void 0===n&&(n=[]),void 0===r&&(r=null),null==e){var a;if(null==(a=r)||!a.errors)return null;e=r.matches}let i=e,u=null==(o=r)?void 0:o.errors;if(null!=u){let e=i.findIndex((e=>e.route.id&&(null==u?void 0:u[e.route.id])));e>=0||l(!1),i=i.slice(0,Math.min(i.length,e+1))}return i.reduceRight(((e,o,a)=>{let l=o.route.id?null==u?void 0:u[o.route.id]:null,s=null;r&&(s=o.route.errorElement||Ue);let c=n.concat(i.slice(0,a+1)),d=()=>{let n;return n=l?s:o.route.Component?t.createElement(o.route.Component,null):o.route.element?o.route.element:e,t.createElement($e,{match:o,routeContext:{outlet:e,matches:c,isDataRoute:null!=r},children:n})};return r&&(o.route.ErrorBoundary||o.route.errorElement||0===a)?t.createElement(Be,{location:r.location,revalidation:r.revalidation,component:s,error:l,children:d(),routeContext:{outlet:null,matches:c,isDataRoute:!0}}):d()}),null)}(y&&y.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:M([c,a.encodeLocation?a.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:M([c,a.encodeLocation?a.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),i,o);return r&&g?t.createElement(Le.Provider,{value:{location:Oe({pathname:"/",search:"",hash:"",state:null,key:"default"},d),navigationType:e.Pop}},g):g}function Fe(){let e=qe(),n=F(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:o},r):null,null)}const Ue=t.createElement(Fe,null);class Be extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:e.error||t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?t.createElement(_e.Provider,{value:this.props.routeContext},t.createElement(Ne.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function $e(e){let{routeContext:n,match:r,children:o}=e,a=t.useContext(Te);return a&&a.static&&a.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(a.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(_e.Provider,{value:n},o)}var We=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(We||{}),Ve=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(Ve||{});function He(e){let n=t.useContext(Pe);return n||l(!1),n}function Qe(e){let n=function(e){let n=t.useContext(_e);return n||l(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||l(!1),r.route.id}function qe(){var e;let n=t.useContext(Ne),r=He(Ve.UseRouteError),o=Qe(Ve.UseRouteError);return n||(null==(e=r.errors)?void 0:e[o])}const Ye=n.startTransition;function Ke(e){let{fallbackElement:n,router:r,future:o}=e,[a,i]=t.useState(r.state),{v7_startTransition:l}=o||{},u=t.useCallback((e=>{l&&Ye?Ye((()=>i(e))):i(e)}),[i,l]);t.useLayoutEffect((()=>r.subscribe(u)),[r,u]);let s=t.useMemo((()=>({createHref:r.createHref,encodeLocation:r.encodeLocation,go:e=>r.navigate(e),push:(e,t,n)=>r.navigate(e,{state:t,preventScrollReset:null==n?void 0:n.preventScrollReset}),replace:(e,t,n)=>r.navigate(e,{replace:!0,state:t,preventScrollReset:null==n?void 0:n.preventScrollReset})})),[r]),c=r.basename||"/",d=t.useMemo((()=>({router:r,navigator:s,static:!1,basename:c})),[r,s,c]);return t.createElement(t.Fragment,null,t.createElement(Te.Provider,{value:d},t.createElement(Pe.Provider,{value:a},t.createElement(Ge,{basename:c,location:a.location,navigationType:a.historyAction,navigator:s},a.initialized?t.createElement(Xe,{routes:r.routes,state:a}):n))),null)}function Xe(e){let{routes:t,state:n}=e;return Ae(t,void 0,n)}function Ge(n){let{basename:r="/",children:o=null,location:a,navigationType:i=e.Pop,navigator:u,static:s=!1}=n;De()&&l(!1);let c=r.replace(/^\/*/,"/"),d=t.useMemo((()=>({basename:c,navigator:u,static:s})),[c,u,s]);"string"==typeof a&&(a=f(a));let{pathname:p="/",search:h="",hash:m="",state:v=null,key:y="default"}=a,g=t.useMemo((()=>{let e=L(p,c);return null==e?null:{location:{pathname:e,search:h,hash:m,state:v,key:y},navigationType:i}}),[c,p,h,m,v,y,i]);return null==g?null:t.createElement(Re.Provider,{value:d},t.createElement(Le.Provider,{children:o,value:g}))}function Je(){return Je=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Je.apply(this,arguments)}function Ze(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}new Promise((()=>{})),t.Component;const et="get",tt="application/x-www-form-urlencoded";function nt(e){return null!=e&&"string"==typeof e.tagName}let rt=null;const ot=new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);function at(e){return null==e||ot.has(e)?e:null}const it=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],lt=["aria-current","caseSensitive","className","end","style","to","children"],ut=["reloadDocument","replace","state","method","action","onSubmit","submit","relative","preventScrollReset"];function st(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new A(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){if(r.__subType){let t=window[r.__subType];if("function"==typeof t)try{let o=new t(r.message);o.stack="",n[e]=o}catch(e){}}if(null==n[e]){let t=new Error(r.message);t.stack="",n[e]=t}}else n[e]=r;return n}n.startTransition;const ct="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,dt=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ft=t.forwardRef((function(e,n){let r,{onClick:o,relative:a,reloadDocument:i,replace:u,state:s,target:c,to:f,preventScrollReset:p}=e,h=Ze(e,it),{basename:m}=t.useContext(Re),v=!1;if("string"==typeof f&&dt.test(f)&&(r=f,ct))try{let e=new URL(window.location.href),t=f.startsWith("//")?new URL(e.protocol+f):new URL(f),n=L(t.pathname,m);t.origin===e.origin&&null!=n?f=n+t.search+t.hash:v=!0}catch(e){}let y=function(e,n){let{relative:r}=void 0===n?{}:n;De()||l(!1);let{basename:o,navigator:a}=t.useContext(Re),{hash:i,pathname:u,search:s}=ze(e,{relative:r}),c=u;return"/"!==o&&(c="/"===u?o:M([o,u])),a.createHref({pathname:c,search:s,hash:i})}(f,{relative:a}),g=function(e,n){let{target:r,replace:o,state:a,preventScrollReset:i,relative:l}=void 0===n?{}:n,u=je(),s=Me(),c=ze(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==o?o:d(s)===d(c);u(e,{replace:n,state:a,preventScrollReset:i,relative:l})}}),[s,u,c,o,a,r,e,i,l])}(f,{replace:u,state:s,target:c,preventScrollReset:p,relative:a});return t.createElement("a",Je({},h,{href:r||y,onClick:v||i?o:function(e){o&&o(e),e.defaultPrevented||g(e)},ref:n,target:c}))})),pt=t.forwardRef((function(e,n){let{"aria-current":r="page",caseSensitive:o=!1,className:a="",end:i=!1,style:l,to:u,children:s}=e,c=Ze(e,lt),d=ze(u,{relative:c.relative}),f=Me(),p=t.useContext(Pe),{navigator:h}=t.useContext(Re),m=h.encodeLocation?h.encodeLocation(d).pathname:d.pathname,v=f.pathname,y=p&&p.navigation&&p.navigation.location?p.navigation.location.pathname:null;o||(v=v.toLowerCase(),y=y?y.toLowerCase():null,m=m.toLowerCase());let g,b=v===m||!i&&v.startsWith(m)&&"/"===v.charAt(m.length),w=null!=y&&(y===m||!i&&y.startsWith(m)&&"/"===y.charAt(m.length)),E=b?r:void 0;g="function"==typeof a?a({isActive:b,isPending:w}):[a,b?"active":null,w?"pending":null].filter(Boolean).join(" ");let S="function"==typeof l?l({isActive:b,isPending:w}):l;return t.createElement(ft,Je({},c,{"aria-current":E,className:g,ref:n,style:S,to:u}),"function"==typeof s?s({isActive:b,isPending:w}):s)})),ht=t.forwardRef(((e,n)=>{let r=gt();return t.createElement(mt,Je({},e,{submit:r,ref:n}))})),mt=t.forwardRef(((e,n)=>{let{reloadDocument:r,replace:o,state:a,method:i=et,action:u,onSubmit:s,submit:c,relative:f,preventScrollReset:p}=e,h=Ze(e,ut),m="get"===i.toLowerCase()?"get":"post",v=function(e,n){let{relative:r}=void 0===n?{}:n,{basename:o}=t.useContext(Re),a=t.useContext(_e);a||l(!1);let[i]=a.matches.slice(-1),u=Je({},ze(e||".",{relative:r})),s=Me();if(null==e&&(u.search=s.search,i.route.index)){let e=new URLSearchParams(u.search);e.delete("index"),u.search=e.toString()?"?"+e.toString():""}return e&&"."!==e||!i.route.index||(u.search=u.search?u.search.replace(/^\?/,"?index&"):"?index"),"/"!==o&&(u.pathname="/"===u.pathname?o:M([o,u.pathname])),d(u)}(u,{relative:f});return t.createElement("form",Je({ref:n,method:m,action:v,onSubmit:r?s:e=>{if(s&&s(e),e.defaultPrevented)return;e.preventDefault();let t=e.nativeEvent.submitter,n=(null==t?void 0:t.getAttribute("formmethod"))||i;c(t||e.currentTarget,{method:n,replace:o,state:a,relative:f,preventScrollReset:p})}},h))}));var vt,yt;function gt(){let{router:e}=function(e){let n=t.useContext(Te);return n||l(!1),n}(vt.UseSubmit),{basename:n}=t.useContext(Re),r=Qe(Ve.UseRouteId);return t.useCallback((function(t,o){void 0===o&&(o={}),function(){if("undefined"==typeof document)throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.")}();let{action:a,method:i,encType:l,formData:u,body:s}=function(e,t){let n,r,o,a,i;if(nt(l=e)&&"form"===l.tagName.toLowerCase()){let i=e.getAttribute("action");r=i?L(i,t):null,n=e.getAttribute("method")||et,o=at(e.getAttribute("enctype"))||tt,a=new FormData(e)}else if(function(e){return nt(e)&&"button"===e.tagName.toLowerCase()}(e)||function(e){return nt(e)&&"input"===e.tagName.toLowerCase()}(e)&&("submit"===e.type||"image"===e.type)){let i=e.form;if(null==i)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');let l=e.getAttribute("formaction")||i.getAttribute("action");if(r=l?L(l,t):null,n=e.getAttribute("formmethod")||i.getAttribute("method")||et,o=at(e.getAttribute("formenctype"))||at(i.getAttribute("enctype"))||tt,a=new FormData(i,e),!function(){if(null===rt)try{new FormData(document.createElement("form"),0),rt=!1}catch(e){rt=!0}return rt}()){let{name:t,type:n,value:r}=e;if("image"===n){let e=t?t+".":"";a.append(e+"x","0"),a.append(e+"y","0")}else t&&a.append(t,r)}}else{if(nt(e))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');n=et,r=null,o=tt,i=e}var l;return a&&"text/plain"===o&&(i=a,a=void 0),{action:r,method:n.toLowerCase(),encType:o,formData:a,body:i}}(t,n);e.navigate(o.action||a,{preventScrollReset:o.preventScrollReset,formData:u,body:s,formMethod:o.method||i,formEncType:o.encType||l,replace:o.replace,state:o.state,fromRouteId:r})}),[e,n,r])}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher"})(vt||(vt={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(yt||(yt={}));var bt=o(935);const wt="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement;function Et(e){const t=Object.prototype.toString.call(e);return"[object Window]"===t||"[object global]"===t}function St(e){return"nodeType"in e}function xt(e){var t,n;return e?Et(e)?e:St(e)&&null!=(t=null==(n=e.ownerDocument)?void 0:n.defaultView)?t:window:window}function kt(e){const{Document:t}=xt(e);return e instanceof t}function Ct(e){return!Et(e)&&e instanceof xt(e).HTMLElement}function Ot(e){return e?Et(e)?e.document:St(e)?kt(e)?e:Ct(e)?e.ownerDocument:document:document:document}const Tt=wt?t.useLayoutEffect:t.useEffect;function Pt(e){const n=(0,t.useRef)(e);return Tt((()=>{n.current=e})),(0,t.useCallback)((function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return null==n.current?void 0:n.current(...t)}),[])}function Rt(e,n){void 0===n&&(n=[e]);const r=(0,t.useRef)(e);return Tt((()=>{r.current!==e&&(r.current=e)}),n),r}function Lt(e,n){const r=(0,t.useRef)();return(0,t.useMemo)((()=>{const t=e(r.current);return r.current=t,t}),[...n])}function _t(e){const n=Pt(e),r=(0,t.useRef)(null),o=(0,t.useCallback)((e=>{e!==r.current&&(null==n||n(e,r.current)),r.current=e}),[]);return[r,o]}function Nt(e){const n=(0,t.useRef)();return(0,t.useEffect)((()=>{n.current=e}),[e]),n.current}let Dt={};function Mt(e,n){return(0,t.useMemo)((()=>{if(n)return n;const t=null==Dt[e]?0:Dt[e]+1;return Dt[e]=t,e+"-"+t}),[e,n])}function It(e){return function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return r.reduce(((t,n)=>{const r=Object.entries(n);for(const[n,o]of r){const r=t[n];null!=r&&(t[n]=r+e*o)}return t}),{...t})}}const jt=It(1),zt=It(-1);function At(e){if(!e)return!1;const{KeyboardEvent:t}=xt(e.target);return t&&e instanceof t}function Ft(e){if(function(e){if(!e)return!1;const{TouchEvent:t}=xt(e.target);return t&&e instanceof t}(e)){if(e.touches&&e.touches.length){const{clientX:t,clientY:n}=e.touches[0];return{x:t,y:n}}if(e.changedTouches&&e.changedTouches.length){const{clientX:t,clientY:n}=e.changedTouches[0];return{x:t,y:n}}}return function(e){return"clientX"in e&&"clientY"in e}(e)?{x:e.clientX,y:e.clientY}:null}const Ut=Object.freeze({Translate:{toString(e){if(!e)return;const{x:t,y:n}=e;return"translate3d("+(t?Math.round(t):0)+"px, "+(n?Math.round(n):0)+"px, 0)"}},Scale:{toString(e){if(!e)return;const{scaleX:t,scaleY:n}=e;return"scaleX("+t+") scaleY("+n+")"}},Transform:{toString(e){if(e)return[Ut.Translate.toString(e),Ut.Scale.toString(e)].join(" ")}},Transition:{toString(e){let{property:t,duration:n,easing:r}=e;return t+" "+n+"ms "+r}}}),Bt="a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]";function $t(e){return e.matches(Bt)?e:e.querySelector(Bt)}const Wt={display:"none"};function Vt(e){let{id:n,value:r}=e;return t.createElement("div",{id:n,style:Wt},r)}const Ht={position:"fixed",width:1,height:1,margin:-1,border:0,padding:0,overflow:"hidden",clip:"rect(0 0 0 0)",clipPath:"inset(100%)",whiteSpace:"nowrap"};function Qt(e){let{id:n,announcement:r}=e;return t.createElement("div",{id:n,style:Ht,role:"status","aria-live":"assertive","aria-atomic":!0},r)}const qt=(0,t.createContext)(null),Yt={draggable:"\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  "},Kt={onDragStart(e){let{active:t}=e;return"Picked up draggable item "+t.id+"."},onDragOver(e){let{active:t,over:n}=e;return n?"Draggable item "+t.id+" was moved over droppable area "+n.id+".":"Draggable item "+t.id+" is no longer over a droppable area."},onDragEnd(e){let{active:t,over:n}=e;return n?"Draggable item "+t.id+" was dropped over droppable area "+n.id:"Draggable item "+t.id+" was dropped."},onDragCancel(e){let{active:t}=e;return"Dragging was cancelled. Draggable item "+t.id+" was dropped."}};function Xt(e){let{announcements:n=Kt,container:r,hiddenTextDescribedById:o,screenReaderInstructions:a=Yt}=e;const{announce:i,announcement:l}=function(){const[e,n]=(0,t.useState)("");return{announce:(0,t.useCallback)((e=>{null!=e&&n(e)}),[]),announcement:e}}(),u=Mt("DndLiveRegion"),[s,c]=(0,t.useState)(!1);if((0,t.useEffect)((()=>{c(!0)}),[]),function(e){const n=(0,t.useContext)(qt);(0,t.useEffect)((()=>{if(!n)throw new Error("useDndMonitor must be used within a children of <DndContext>");return n(e)}),[e,n])}((0,t.useMemo)((()=>({onDragStart(e){let{active:t}=e;i(n.onDragStart({active:t}))},onDragMove(e){let{active:t,over:r}=e;n.onDragMove&&i(n.onDragMove({active:t,over:r}))},onDragOver(e){let{active:t,over:r}=e;i(n.onDragOver({active:t,over:r}))},onDragEnd(e){let{active:t,over:r}=e;i(n.onDragEnd({active:t,over:r}))},onDragCancel(e){let{active:t,over:r}=e;i(n.onDragCancel({active:t,over:r}))}})),[i,n])),!s)return null;const d=t.createElement(t.Fragment,null,t.createElement(Vt,{id:o,value:a.draggable}),t.createElement(Qt,{id:u,announcement:l}));return r?(0,bt.createPortal)(d,r):d}var Gt;function Jt(){}!function(e){e.DragStart="dragStart",e.DragMove="dragMove",e.DragEnd="dragEnd",e.DragCancel="dragCancel",e.DragOver="dragOver",e.RegisterDroppable="registerDroppable",e.SetDroppableDisabled="setDroppableDisabled",e.UnregisterDroppable="unregisterDroppable"}(Gt||(Gt={}));const Zt=Object.freeze({x:0,y:0});function en(e,t){const n=Ft(e);return n?(n.x-t.left)/t.width*100+"% "+(n.y-t.top)/t.height*100+"%":"0 0"}function tn(e,t){let{data:{value:n}}=e,{data:{value:r}}=t;return n-r}function nn(e,t){let{data:{value:n}}=e,{data:{value:r}}=t;return r-n}function rn(e,t,n){return void 0===t&&(t=e.left),void 0===n&&(n=e.top),{x:t+.5*e.width,y:n+.5*e.height}}const on=e=>{let{collisionRect:t,droppableRects:n,droppableContainers:r}=e;const o=rn(t,t.left,t.top),a=[];for(const e of r){const{id:t}=e,r=n.get(t);if(r){const n=(i=rn(r),l=o,Math.sqrt(Math.pow(i.x-l.x,2)+Math.pow(i.y-l.y,2)));a.push({id:t,data:{droppableContainer:e,value:n}})}}var i,l;return a.sort(tn)};function an(e,t){const n=Math.max(t.top,e.top),r=Math.max(t.left,e.left),o=Math.min(t.left+t.width,e.left+e.width),a=Math.min(t.top+t.height,e.top+e.height),i=o-r,l=a-n;if(r<o&&n<a){const n=t.width*t.height,r=e.width*e.height,o=i*l;return Number((o/(n+r-o)).toFixed(4))}return 0}const ln=e=>{let{collisionRect:t,droppableRects:n,droppableContainers:r}=e;const o=[];for(const e of r){const{id:r}=e,a=n.get(r);if(a){const n=an(a,t);n>0&&o.push({id:r,data:{droppableContainer:e,value:n}})}}return o.sort(nn)};function un(e,t){return e&&t?{x:e.left-t.left,y:e.top-t.top}:Zt}function sn(e){return function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return r.reduce(((t,n)=>({...t,top:t.top+e*n.y,bottom:t.bottom+e*n.y,left:t.left+e*n.x,right:t.right+e*n.x})),{...t})}}const cn=sn(1);function dn(e){if(e.startsWith("matrix3d(")){const t=e.slice(9,-1).split(/, /);return{x:+t[12],y:+t[13],scaleX:+t[0],scaleY:+t[5]}}if(e.startsWith("matrix(")){const t=e.slice(7,-1).split(/, /);return{x:+t[4],y:+t[5],scaleX:+t[0],scaleY:+t[3]}}return null}const fn={ignoreTransform:!1};function pn(e,t){void 0===t&&(t=fn);let n=e.getBoundingClientRect();if(t.ignoreTransform){const{transform:t,transformOrigin:r}=xt(e).getComputedStyle(e);t&&(n=function(e,t,n){const r=dn(t);if(!r)return e;const{scaleX:o,scaleY:a,x:i,y:l}=r,u=e.left-i-(1-o)*parseFloat(n),s=e.top-l-(1-a)*parseFloat(n.slice(n.indexOf(" ")+1)),c=o?e.width/o:e.width,d=a?e.height/a:e.height;return{width:c,height:d,top:s,right:u+c,bottom:s+d,left:u}}(n,t,r))}const{top:r,left:o,width:a,height:i,bottom:l,right:u}=n;return{top:r,left:o,width:a,height:i,bottom:l,right:u}}function hn(e){return pn(e,{ignoreTransform:!0})}function mn(e,t){const n=[];return e?function r(o){if(null!=t&&n.length>=t)return n;if(!o)return n;if(kt(o)&&null!=o.scrollingElement&&!n.includes(o.scrollingElement))return n.push(o.scrollingElement),n;if(!Ct(o)||function(e){return e instanceof xt(e).SVGElement}(o))return n;if(n.includes(o))return n;const a=xt(e).getComputedStyle(o);return o!==e&&function(e,t){void 0===t&&(t=xt(e).getComputedStyle(e));const n=/(auto|scroll|overlay)/;return["overflow","overflowX","overflowY"].some((e=>{const r=t[e];return"string"==typeof r&&n.test(r)}))}(o,a)&&n.push(o),function(e,t){return void 0===t&&(t=xt(e).getComputedStyle(e)),"fixed"===t.position}(o,a)?n:r(o.parentNode)}(e):n}function vn(e){const[t]=mn(e,1);return null!=t?t:null}function yn(e){return wt&&e?Et(e)?e:St(e)?kt(e)||e===Ot(e).scrollingElement?window:Ct(e)?e:null:null:null}function gn(e){return Et(e)?e.scrollX:e.scrollLeft}function bn(e){return Et(e)?e.scrollY:e.scrollTop}function wn(e){return{x:gn(e),y:bn(e)}}var En;function Sn(e){return!(!wt||!e)&&e===document.scrollingElement}function xn(e){const t={x:0,y:0},n=Sn(e)?{height:window.innerHeight,width:window.innerWidth}:{height:e.clientHeight,width:e.clientWidth},r={x:e.scrollWidth-n.width,y:e.scrollHeight-n.height};return{isTop:e.scrollTop<=t.y,isLeft:e.scrollLeft<=t.x,isBottom:e.scrollTop>=r.y,isRight:e.scrollLeft>=r.x,maxScroll:r,minScroll:t}}!function(e){e[e.Forward=1]="Forward",e[e.Backward=-1]="Backward"}(En||(En={}));const kn={x:.2,y:.2};function Cn(e,t,n,r,o){let{top:a,left:i,right:l,bottom:u}=n;void 0===r&&(r=10),void 0===o&&(o=kn);const{isTop:s,isBottom:c,isLeft:d,isRight:f}=xn(e),p={x:0,y:0},h={x:0,y:0},m=t.height*o.y,v=t.width*o.x;return!s&&a<=t.top+m?(p.y=En.Backward,h.y=r*Math.abs((t.top+m-a)/m)):!c&&u>=t.bottom-m&&(p.y=En.Forward,h.y=r*Math.abs((t.bottom-m-u)/m)),!f&&l>=t.right-v?(p.x=En.Forward,h.x=r*Math.abs((t.right-v-l)/v)):!d&&i<=t.left+v&&(p.x=En.Backward,h.x=r*Math.abs((t.left+v-i)/v)),{direction:p,speed:h}}function On(e){if(e===document.scrollingElement){const{innerWidth:e,innerHeight:t}=window;return{top:0,left:0,right:e,bottom:t,width:e,height:t}}const{top:t,left:n,right:r,bottom:o}=e.getBoundingClientRect();return{top:t,left:n,right:r,bottom:o,width:e.clientWidth,height:e.clientHeight}}function Tn(e){return e.reduce(((e,t)=>jt(e,wn(t))),Zt)}function Pn(e,t){if(void 0===t&&(t=pn),!e)return;const{top:n,left:r,bottom:o,right:a}=t(e);vn(e)&&(o<=0||a<=0||n>=window.innerHeight||r>=window.innerWidth)&&e.scrollIntoView({block:"center",inline:"center"})}const Rn=[["x",["left","right"],function(e){return e.reduce(((e,t)=>e+gn(t)),0)}],["y",["top","bottom"],function(e){return e.reduce(((e,t)=>e+bn(t)),0)}]];class Ln{constructor(e,t){this.rect=void 0,this.width=void 0,this.height=void 0,this.top=void 0,this.bottom=void 0,this.right=void 0,this.left=void 0;const n=mn(t),r=Tn(n);this.rect={...e},this.width=e.width,this.height=e.height;for(const[e,t,o]of Rn)for(const a of t)Object.defineProperty(this,a,{get:()=>{const t=o(n),i=r[e]-t;return this.rect[a]+i},enumerable:!0});Object.defineProperty(this,"rect",{enumerable:!1})}}class _n{constructor(e){this.target=void 0,this.listeners=[],this.removeAll=()=>{this.listeners.forEach((e=>{var t;return null==(t=this.target)?void 0:t.removeEventListener(...e)}))},this.target=e}add(e,t,n){var r;null==(r=this.target)||r.addEventListener(e,t,n),this.listeners.push([e,t,n])}}function Nn(e,t){const n=Math.abs(e.x),r=Math.abs(e.y);return"number"==typeof t?Math.sqrt(n**2+r**2)>t:"x"in t&&"y"in t?n>t.x&&r>t.y:"x"in t?n>t.x:"y"in t&&r>t.y}var Dn,Mn,In;function jn(e){e.preventDefault()}function zn(e){e.stopPropagation()}!function(e){e.Click="click",e.DragStart="dragstart",e.Keydown="keydown",e.ContextMenu="contextmenu",e.Resize="resize",e.SelectionChange="selectionchange",e.VisibilityChange="visibilitychange"}(Dn||(Dn={})),(In=Mn||(Mn={})).Space="Space",In.Down="ArrowDown",In.Right="ArrowRight",In.Left="ArrowLeft",In.Up="ArrowUp",In.Esc="Escape",In.Enter="Enter";const An={start:[Mn.Space,Mn.Enter],cancel:[Mn.Esc],end:[Mn.Space,Mn.Enter]},Fn=(e,t)=>{let{currentCoordinates:n}=t;switch(e.code){case Mn.Right:return{...n,x:n.x+25};case Mn.Left:return{...n,x:n.x-25};case Mn.Down:return{...n,y:n.y+25};case Mn.Up:return{...n,y:n.y-25}}};class Un{constructor(e){this.props=void 0,this.autoScrollEnabled=!1,this.referenceCoordinates=void 0,this.listeners=void 0,this.windowListeners=void 0,this.props=e;const{event:{target:t}}=e;this.props=e,this.listeners=new _n(Ot(t)),this.windowListeners=new _n(xt(t)),this.handleKeyDown=this.handleKeyDown.bind(this),this.handleCancel=this.handleCancel.bind(this),this.attach()}attach(){this.handleStart(),this.windowListeners.add(Dn.Resize,this.handleCancel),this.windowListeners.add(Dn.VisibilityChange,this.handleCancel),setTimeout((()=>this.listeners.add(Dn.Keydown,this.handleKeyDown)))}handleStart(){const{activeNode:e,onStart:t}=this.props,n=e.node.current;n&&Pn(n),t(Zt)}handleKeyDown(e){if(At(e)){const{active:t,context:n,options:r}=this.props,{keyboardCodes:o=An,coordinateGetter:a=Fn,scrollBehavior:i="smooth"}=r,{code:l}=e;if(o.end.includes(l))return void this.handleEnd(e);if(o.cancel.includes(l))return void this.handleCancel(e);const{collisionRect:u}=n.current,s=u?{x:u.left,y:u.top}:Zt;this.referenceCoordinates||(this.referenceCoordinates=s);const c=a(e,{active:t,context:n.current,currentCoordinates:s});if(c){const t=zt(c,s),r={x:0,y:0},{scrollableAncestors:o}=n.current;for(const n of o){const o=e.code,{isTop:a,isRight:l,isLeft:u,isBottom:s,maxScroll:d,minScroll:f}=xn(n),p=On(n),h={x:Math.min(o===Mn.Right?p.right-p.width/2:p.right,Math.max(o===Mn.Right?p.left:p.left+p.width/2,c.x)),y:Math.min(o===Mn.Down?p.bottom-p.height/2:p.bottom,Math.max(o===Mn.Down?p.top:p.top+p.height/2,c.y))},m=o===Mn.Right&&!l||o===Mn.Left&&!u,v=o===Mn.Down&&!s||o===Mn.Up&&!a;if(m&&h.x!==c.x){const e=n.scrollLeft+t.x,a=o===Mn.Right&&e<=d.x||o===Mn.Left&&e>=f.x;if(a&&!t.y)return void n.scrollTo({left:e,behavior:i});r.x=a?n.scrollLeft-e:o===Mn.Right?n.scrollLeft-d.x:n.scrollLeft-f.x,r.x&&n.scrollBy({left:-r.x,behavior:i});break}if(v&&h.y!==c.y){const e=n.scrollTop+t.y,a=o===Mn.Down&&e<=d.y||o===Mn.Up&&e>=f.y;if(a&&!t.x)return void n.scrollTo({top:e,behavior:i});r.y=a?n.scrollTop-e:o===Mn.Down?n.scrollTop-d.y:n.scrollTop-f.y,r.y&&n.scrollBy({top:-r.y,behavior:i});break}}this.handleMove(e,jt(zt(c,this.referenceCoordinates),r))}}}handleMove(e,t){const{onMove:n}=this.props;e.preventDefault(),n(t)}handleEnd(e){const{onEnd:t}=this.props;e.preventDefault(),this.detach(),t()}handleCancel(e){const{onCancel:t}=this.props;e.preventDefault(),this.detach(),t()}detach(){this.listeners.removeAll(),this.windowListeners.removeAll()}}function Bn(e){return Boolean(e&&"distance"in e)}function $n(e){return Boolean(e&&"delay"in e)}Un.activators=[{eventName:"onKeyDown",handler:(e,t,n)=>{let{keyboardCodes:r=An,onActivation:o}=t,{active:a}=n;const{code:i}=e.nativeEvent;if(r.start.includes(i)){const t=a.activatorNode.current;return!(t&&e.target!==t||(e.preventDefault(),null==o||o({event:e.nativeEvent}),0))}return!1}}];class Wn{constructor(e,t,n){var r;void 0===n&&(n=function(e){const{EventTarget:t}=xt(e);return e instanceof t?e:Ot(e)}(e.event.target)),this.props=void 0,this.events=void 0,this.autoScrollEnabled=!0,this.document=void 0,this.activated=!1,this.initialCoordinates=void 0,this.timeoutId=null,this.listeners=void 0,this.documentListeners=void 0,this.windowListeners=void 0,this.props=e,this.events=t;const{event:o}=e,{target:a}=o;this.props=e,this.events=t,this.document=Ot(a),this.documentListeners=new _n(this.document),this.listeners=new _n(n),this.windowListeners=new _n(xt(a)),this.initialCoordinates=null!=(r=Ft(o))?r:Zt,this.handleStart=this.handleStart.bind(this),this.handleMove=this.handleMove.bind(this),this.handleEnd=this.handleEnd.bind(this),this.handleCancel=this.handleCancel.bind(this),this.handleKeydown=this.handleKeydown.bind(this),this.removeTextSelection=this.removeTextSelection.bind(this),this.attach()}attach(){const{events:e,props:{options:{activationConstraint:t}}}=this;if(this.listeners.add(e.move.name,this.handleMove,{passive:!1}),this.listeners.add(e.end.name,this.handleEnd),this.windowListeners.add(Dn.Resize,this.handleCancel),this.windowListeners.add(Dn.DragStart,jn),this.windowListeners.add(Dn.VisibilityChange,this.handleCancel),this.windowListeners.add(Dn.ContextMenu,jn),this.documentListeners.add(Dn.Keydown,this.handleKeydown),t){if(Bn(t))return;if($n(t))return void(this.timeoutId=setTimeout(this.handleStart,t.delay))}this.handleStart()}detach(){this.listeners.removeAll(),this.windowListeners.removeAll(),setTimeout(this.documentListeners.removeAll,50),null!==this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=null)}handleStart(){const{initialCoordinates:e}=this,{onStart:t}=this.props;e&&(this.activated=!0,this.documentListeners.add(Dn.Click,zn,{capture:!0}),this.removeTextSelection(),this.documentListeners.add(Dn.SelectionChange,this.removeTextSelection),t(e))}handleMove(e){var t;const{activated:n,initialCoordinates:r,props:o}=this,{onMove:a,options:{activationConstraint:i}}=o;if(!r)return;const l=null!=(t=Ft(e))?t:Zt,u=zt(r,l);if(!n&&i){if($n(i))return Nn(u,i.tolerance)?this.handleCancel():void 0;if(Bn(i))return null!=i.tolerance&&Nn(u,i.tolerance)?this.handleCancel():Nn(u,i.distance)?this.handleStart():void 0}e.cancelable&&e.preventDefault(),a(l)}handleEnd(){const{onEnd:e}=this.props;this.detach(),e()}handleCancel(){const{onCancel:e}=this.props;this.detach(),e()}handleKeydown(e){e.code===Mn.Esc&&this.handleCancel()}removeTextSelection(){var e;null==(e=this.document.getSelection())||e.removeAllRanges()}}const Vn={move:{name:"pointermove"},end:{name:"pointerup"}};class Hn extends Wn{constructor(e){const{event:t}=e,n=Ot(t.target);super(e,Vn,n)}}Hn.activators=[{eventName:"onPointerDown",handler:(e,t)=>{let{nativeEvent:n}=e,{onActivation:r}=t;return!(!n.isPrimary||0!==n.button||(null==r||r({event:n}),0))}}];const Qn={move:{name:"mousemove"},end:{name:"mouseup"}};var qn;!function(e){e[e.RightClick=2]="RightClick"}(qn||(qn={})),class extends Wn{constructor(e){super(e,Qn,Ot(e.event.target))}}.activators=[{eventName:"onMouseDown",handler:(e,t)=>{let{nativeEvent:n}=e,{onActivation:r}=t;return n.button!==qn.RightClick&&(null==r||r({event:n}),!0)}}];const Yn={move:{name:"touchmove"},end:{name:"touchend"}};var Kn,Xn;(class extends Wn{constructor(e){super(e,Yn)}static setup(){return window.addEventListener(Yn.move.name,e,{capture:!1,passive:!1}),function(){window.removeEventListener(Yn.move.name,e)};function e(){}}}).activators=[{eventName:"onTouchStart",handler:(e,t)=>{let{nativeEvent:n}=e,{onActivation:r}=t;const{touches:o}=n;return!(o.length>1||(null==r||r({event:n}),0))}}],function(e){e[e.Pointer=0]="Pointer",e[e.DraggableRect=1]="DraggableRect"}(Kn||(Kn={})),function(e){e[e.TreeOrder=0]="TreeOrder",e[e.ReversedTreeOrder=1]="ReversedTreeOrder"}(Xn||(Xn={}));const Gn={x:{[En.Backward]:!1,[En.Forward]:!1},y:{[En.Backward]:!1,[En.Forward]:!1}};var Jn,Zn;!function(e){e[e.Always=0]="Always",e[e.BeforeDragging=1]="BeforeDragging",e[e.WhileDragging=2]="WhileDragging"}(Jn||(Jn={})),function(e){e.Optimized="optimized"}(Zn||(Zn={}));const er=new Map;function tr(e,t){return Lt((n=>e?n||("function"==typeof t?t(e):e):null),[t,e])}function nr(e){let{callback:n,disabled:r}=e;const o=Pt(n),a=(0,t.useMemo)((()=>{if(r||"undefined"==typeof window||void 0===window.ResizeObserver)return;const{ResizeObserver:e}=window;return new e(o)}),[r]);return(0,t.useEffect)((()=>()=>null==a?void 0:a.disconnect()),[a]),a}function rr(e){return new Ln(pn(e),e)}function or(e,n,r){void 0===n&&(n=rr);const[o,a]=(0,t.useReducer)((function(t){if(!e)return null;var o;if(!1===e.isConnected)return null!=(o=null!=t?t:r)?o:null;const a=n(e);return JSON.stringify(t)===JSON.stringify(a)?t:a}),null),i=function(e){let{callback:n,disabled:r}=e;const o=Pt(n),a=(0,t.useMemo)((()=>{if(r||"undefined"==typeof window||void 0===window.MutationObserver)return;const{MutationObserver:e}=window;return new e(o)}),[o,r]);return(0,t.useEffect)((()=>()=>null==a?void 0:a.disconnect()),[a]),a}({callback(t){if(e)for(const n of t){const{type:t,target:r}=n;if("childList"===t&&r instanceof HTMLElement&&r.contains(e)){a();break}}}}),l=nr({callback:a});return Tt((()=>{a(),e?(null==l||l.observe(e),null==i||i.observe(document.body,{childList:!0,subtree:!0})):(null==l||l.disconnect(),null==i||i.disconnect())}),[e]),o}const ar=[];function ir(e,n){void 0===n&&(n=[]);const r=(0,t.useRef)(null);return(0,t.useEffect)((()=>{r.current=null}),n),(0,t.useEffect)((()=>{const t=e!==Zt;t&&!r.current&&(r.current=e),!t&&r.current&&(r.current=null)}),[e]),r.current?zt(e,r.current):Zt}function lr(e){return(0,t.useMemo)((()=>e?function(e){const t=e.innerWidth,n=e.innerHeight;return{top:0,left:0,right:t,bottom:n,width:t,height:n}}(e):null),[e])}const ur=[];function sr(e){if(!e)return null;if(e.children.length>1)return e;const t=e.children[0];return Ct(t)?t:e}const cr=[{sensor:Hn,options:{}},{sensor:Un,options:{}}],dr={current:{}},fr={draggable:{measure:hn},droppable:{measure:hn,strategy:Jn.WhileDragging,frequency:Zn.Optimized},dragOverlay:{measure:pn}};class pr extends Map{get(e){var t;return null!=e&&null!=(t=super.get(e))?t:void 0}toArray(){return Array.from(this.values())}getEnabled(){return this.toArray().filter((e=>{let{disabled:t}=e;return!t}))}getNodeFor(e){var t,n;return null!=(t=null==(n=this.get(e))?void 0:n.node.current)?t:void 0}}const hr={activatorEvent:null,active:null,activeNode:null,activeNodeRect:null,collisions:null,containerNodeRect:null,draggableNodes:new Map,droppableRects:new Map,droppableContainers:new pr,over:null,dragOverlay:{nodeRef:{current:null},rect:null,setRef:Jt},scrollableAncestors:[],scrollableAncestorRects:[],measuringConfiguration:fr,measureDroppableContainers:Jt,windowRect:null,measuringScheduled:!1},mr={activatorEvent:null,activators:[],active:null,activeNodeRect:null,ariaDescribedById:{draggable:""},dispatch:Jt,draggableNodes:new Map,over:null,measureDroppableContainers:Jt},vr=(0,t.createContext)(mr),yr=(0,t.createContext)(hr);function gr(){return{draggable:{active:null,initialCoordinates:{x:0,y:0},nodes:new Map,translate:{x:0,y:0}},droppable:{containers:new pr}}}function br(e,t){switch(t.type){case Gt.DragStart:return{...e,draggable:{...e.draggable,initialCoordinates:t.initialCoordinates,active:t.active}};case Gt.DragMove:return e.draggable.active?{...e,draggable:{...e.draggable,translate:{x:t.coordinates.x-e.draggable.initialCoordinates.x,y:t.coordinates.y-e.draggable.initialCoordinates.y}}}:e;case Gt.DragEnd:case Gt.DragCancel:return{...e,draggable:{...e.draggable,active:null,initialCoordinates:{x:0,y:0},translate:{x:0,y:0}}};case Gt.RegisterDroppable:{const{element:n}=t,{id:r}=n,o=new pr(e.droppable.containers);return o.set(r,n),{...e,droppable:{...e.droppable,containers:o}}}case Gt.SetDroppableDisabled:{const{id:n,key:r,disabled:o}=t,a=e.droppable.containers.get(n);if(!a||r!==a.key)return e;const i=new pr(e.droppable.containers);return i.set(n,{...a,disabled:o}),{...e,droppable:{...e.droppable,containers:i}}}case Gt.UnregisterDroppable:{const{id:n,key:r}=t,o=e.droppable.containers.get(n);if(!o||r!==o.key)return e;const a=new pr(e.droppable.containers);return a.delete(n),{...e,droppable:{...e.droppable,containers:a}}}default:return e}}function wr(e){let{disabled:n}=e;const{active:r,activatorEvent:o,draggableNodes:a}=(0,t.useContext)(vr),i=Nt(o),l=Nt(null==r?void 0:r.id);return(0,t.useEffect)((()=>{if(!n&&!o&&i&&null!=l){if(!At(i))return;if(document.activeElement===i.target)return;const e=a.get(l);if(!e)return;const{activatorNode:t,node:n}=e;if(!t.current&&!n.current)return;requestAnimationFrame((()=>{for(const e of[t.current,n.current]){if(!e)continue;const t=$t(e);if(t){t.focus();break}}}))}}),[o,n,a,l,i]),null}function Er(e,t){let{transform:n,...r}=t;return null!=e&&e.length?e.reduce(((e,t)=>t({transform:e,...r})),n):n}const Sr=(0,t.createContext)({...Zt,scaleX:1,scaleY:1});var xr;!function(e){e[e.Uninitialized=0]="Uninitialized",e[e.Initializing=1]="Initializing",e[e.Initialized=2]="Initialized"}(xr||(xr={}));const kr=(0,t.memo)((function(e){var n,r,o,a;let{id:i,accessibility:l,autoScroll:u=!0,children:s,sensors:c=cr,collisionDetection:d=ln,measuring:f,modifiers:p,...h}=e;const m=(0,t.useReducer)(br,void 0,gr),[v,y]=m,[g,b]=function(){const[e]=(0,t.useState)((()=>new Set)),n=(0,t.useCallback)((t=>(e.add(t),()=>e.delete(t))),[e]);return[(0,t.useCallback)((t=>{let{type:n,event:r}=t;e.forEach((e=>{var t;return null==(t=e[n])?void 0:t.call(e,r)}))}),[e]),n]}(),[w,E]=(0,t.useState)(xr.Uninitialized),S=w===xr.Initialized,{draggable:{active:x,nodes:k,translate:C},droppable:{containers:O}}=v,T=x?k.get(x):null,P=(0,t.useRef)({initial:null,translated:null}),R=(0,t.useMemo)((()=>{var e;return null!=x?{id:x,data:null!=(e=null==T?void 0:T.data)?e:dr,rect:P}:null}),[x,T]),L=(0,t.useRef)(null),[_,N]=(0,t.useState)(null),[D,M]=(0,t.useState)(null),I=Rt(h,Object.values(h)),j=Mt("DndDescribedBy",i),z=(0,t.useMemo)((()=>O.getEnabled()),[O]),A=(F=f,(0,t.useMemo)((()=>({draggable:{...fr.draggable,...null==F?void 0:F.draggable},droppable:{...fr.droppable,...null==F?void 0:F.droppable},dragOverlay:{...fr.dragOverlay,...null==F?void 0:F.dragOverlay}})),[null==F?void 0:F.draggable,null==F?void 0:F.droppable,null==F?void 0:F.dragOverlay]));var F;const{droppableRects:U,measureDroppableContainers:B,measuringScheduled:$}=function(e,n){let{dragging:r,dependencies:o,config:a}=n;const[i,l]=(0,t.useState)(null),{frequency:u,measure:s,strategy:c}=a,d=(0,t.useRef)(e),f=function(){switch(c){case Jn.Always:return!1;case Jn.BeforeDragging:return r;default:return!r}}(),p=Rt(f),h=(0,t.useCallback)((function(e){void 0===e&&(e=[]),p.current||l((t=>null===t?e:t.concat(e.filter((e=>!t.includes(e))))))}),[p]),m=(0,t.useRef)(null),v=Lt((t=>{if(f&&!r)return er;if(!t||t===er||d.current!==e||null!=i){const t=new Map;for(let n of e){if(!n)continue;if(i&&i.length>0&&!i.includes(n.id)&&n.rect.current){t.set(n.id,n.rect.current);continue}const e=n.node.current,r=e?new Ln(s(e),e):null;n.rect.current=r,r&&t.set(n.id,r)}return t}return t}),[e,i,r,f,s]);return(0,t.useEffect)((()=>{d.current=e}),[e]),(0,t.useEffect)((()=>{f||h()}),[r,f]),(0,t.useEffect)((()=>{i&&i.length>0&&l(null)}),[JSON.stringify(i)]),(0,t.useEffect)((()=>{f||"number"!=typeof u||null!==m.current||(m.current=setTimeout((()=>{h(),m.current=null}),u))}),[u,f,h,...o]),{droppableRects:v,measureDroppableContainers:h,measuringScheduled:null!=i}}(z,{dragging:S,dependencies:[C.x,C.y],config:A.droppable}),W=function(e,t){const n=null!==t?e.get(t):void 0,r=n?n.node.current:null;return Lt((e=>{var n;return null===t?null:null!=(n=null!=r?r:e)?n:null}),[r,t])}(k,x),V=(0,t.useMemo)((()=>D?Ft(D):null),[D]),H=function(){const e=!1===(null==_?void 0:_.autoScrollEnabled),t="object"==typeof u?!1===u.enabled:!1===u,n=S&&!e&&!t;return"object"==typeof u?{...u,enabled:n}:{enabled:n}}(),Q=function(e,t){return tr(e,t)}(W,A.draggable.measure);!function(e){let{activeNode:n,measure:r,initialRect:o,config:a=!0}=e;const i=(0,t.useRef)(!1),{x:l,y:u}="boolean"==typeof a?{x:a,y:a}:a;Tt((()=>{if(!l&&!u||!n)return void(i.current=!1);if(i.current||!o)return;const e=null==n?void 0:n.node.current;if(!e||!1===e.isConnected)return;const t=un(r(e),o);if(l||(t.x=0),u||(t.y=0),i.current=!0,Math.abs(t.x)>0||Math.abs(t.y)>0){const n=vn(e);n&&n.scrollBy({top:t.y,left:t.x})}}),[n,l,u,o,r])}({activeNode:x?k.get(x):null,config:H.layoutShiftCompensation,initialRect:Q,measure:A.draggable.measure});const q=or(W,A.draggable.measure,Q),Y=or(W?W.parentElement:null),K=(0,t.useRef)({activatorEvent:null,active:null,activeNode:W,collisionRect:null,collisions:null,droppableRects:U,draggableNodes:k,draggingNode:null,draggingNodeRect:null,droppableContainers:O,over:null,scrollableAncestors:[],scrollAdjustedTranslate:null}),X=O.getNodeFor(null==(n=K.current.over)?void 0:n.id),G=function(e){let{measure:n}=e;const[r,o]=(0,t.useState)(null),a=nr({callback:(0,t.useCallback)((e=>{for(const{target:t}of e)if(Ct(t)){o((e=>{const r=n(t);return e?{...e,width:r.width,height:r.height}:r}));break}}),[n])}),i=(0,t.useCallback)((e=>{const t=sr(e);null==a||a.disconnect(),t&&(null==a||a.observe(t)),o(t?n(t):null)}),[n,a]),[l,u]=_t(i);return(0,t.useMemo)((()=>({nodeRef:l,rect:r,setRef:u})),[r,l,u])}({measure:A.dragOverlay.measure}),J=null!=(r=G.nodeRef.current)?r:W,Z=S?null!=(o=G.rect)?o:q:null,ee=Boolean(G.nodeRef.current&&G.rect),te=un(ne=ee?null:q,tr(ne));var ne;const re=lr(J?xt(J):null),oe=function(e){const n=(0,t.useRef)(e),r=Lt((t=>e?t&&t!==ar&&e&&n.current&&e.parentNode===n.current.parentNode?t:mn(e):ar),[e]);return(0,t.useEffect)((()=>{n.current=e}),[e]),r}(S?null!=X?X:W:null),ae=function(e,n){void 0===n&&(n=pn);const[r]=e,o=lr(r?xt(r):null),[a,i]=(0,t.useReducer)((function(){return e.length?e.map((e=>Sn(e)?o:new Ln(n(e),e))):ur}),ur),l=nr({callback:i});return e.length>0&&a===ur&&i(),Tt((()=>{e.length?e.forEach((e=>null==l?void 0:l.observe(e))):(null==l||l.disconnect(),i())}),[e]),a}(oe),ie=Er(p,{transform:{x:C.x-te.x,y:C.y-te.y,scaleX:1,scaleY:1},activatorEvent:D,active:R,activeNodeRect:q,containerNodeRect:Y,draggingNodeRect:Z,over:K.current.over,overlayNodeRect:G.rect,scrollableAncestors:oe,scrollableAncestorRects:ae,windowRect:re}),le=V?jt(V,C):null,ue=function(e){const[n,r]=(0,t.useState)(null),o=(0,t.useRef)(e),a=(0,t.useCallback)((e=>{const t=yn(e.target);t&&r((e=>e?(e.set(t,wn(t)),new Map(e)):null))}),[]);return(0,t.useEffect)((()=>{const t=o.current;if(e!==t){n(t);const i=e.map((e=>{const t=yn(e);return t?(t.addEventListener("scroll",a,{passive:!0}),[t,wn(t)]):null})).filter((e=>null!=e));r(i.length?new Map(i):null),o.current=e}return()=>{n(e),n(t)};function n(e){e.forEach((e=>{const t=yn(e);null==t||t.removeEventListener("scroll",a)}))}}),[a,e]),(0,t.useMemo)((()=>e.length?n?Array.from(n.values()).reduce(((e,t)=>jt(e,t)),Zt):Tn(e):Zt),[e,n])}(oe),se=ir(ue),ce=ir(ue,[q]),de=jt(ie,se),fe=Z?cn(Z,ie):null,pe=R&&fe?d({active:R,collisionRect:fe,droppableRects:U,droppableContainers:z,pointerCoordinates:le}):null,he=function(e,t){if(!e||0===e.length)return null;const[n]=e;return n.id}(pe),[me,ve]=(0,t.useState)(null),ye=function(e,t,n){return{...e,scaleX:t&&n?t.width/n.width:1,scaleY:t&&n?t.height/n.height:1}}(ee?ie:jt(ie,ce),null!=(a=null==me?void 0:me.rect)?a:null,q),ge=(0,t.useCallback)(((e,t)=>{let{sensor:n,options:r}=t;if(null==L.current)return;const o=k.get(L.current);if(!o)return;const a=e.nativeEvent,i=new n({active:L.current,activeNode:o,event:a,options:r,context:K,onStart(e){const t=L.current;if(null==t)return;const n=k.get(t);if(!n)return;const{onDragStart:r}=I.current,o={active:{id:t,data:n.data,rect:P}};(0,bt.unstable_batchedUpdates)((()=>{null==r||r(o),E(xr.Initializing),y({type:Gt.DragStart,initialCoordinates:e,active:t}),g({type:"onDragStart",event:o})}))},onMove(e){y({type:Gt.DragMove,coordinates:e})},onEnd:l(Gt.DragEnd),onCancel:l(Gt.DragCancel)});function l(e){return async function(){const{active:t,collisions:n,over:r,scrollAdjustedTranslate:o}=K.current;let i=null;if(t&&o){const{cancelDrop:l}=I.current;i={activatorEvent:a,active:t,collisions:n,delta:o,over:r},e===Gt.DragEnd&&"function"==typeof l&&await Promise.resolve(l(i))&&(e=Gt.DragCancel)}L.current=null,(0,bt.unstable_batchedUpdates)((()=>{y({type:e}),E(xr.Uninitialized),ve(null),N(null),M(null);const t=e===Gt.DragEnd?"onDragEnd":"onDragCancel";if(i){const e=I.current[t];null==e||e(i),g({type:t,event:i})}}))}}(0,bt.unstable_batchedUpdates)((()=>{N(i),M(e.nativeEvent)}))}),[k]),be=(0,t.useCallback)(((e,t)=>(n,r)=>{const o=n.nativeEvent,a=k.get(r);if(null!==L.current||!a||o.dndKit||o.defaultPrevented)return;const i={active:a};!0===e(n,t.options,i)&&(o.dndKit={capturedBy:t.sensor},L.current=r,ge(n,t))}),[k,ge]),we=function(e,n){return(0,t.useMemo)((()=>e.reduce(((e,t)=>{const{sensor:r}=t;return[...e,...r.activators.map((e=>({eventName:e.eventName,handler:n(e.handler,t)})))]}),[])),[e,n])}(c,be);!function(e){(0,t.useEffect)((()=>{if(!wt)return;const t=e.map((e=>{let{sensor:t}=e;return null==t.setup?void 0:t.setup()}));return()=>{for(const e of t)null==e||e()}}),e.map((e=>{let{sensor:t}=e;return t})))}(c),Tt((()=>{q&&w===xr.Initializing&&E(xr.Initialized)}),[q,w]),(0,t.useEffect)((()=>{const{onDragMove:e}=I.current,{active:t,activatorEvent:n,collisions:r,over:o}=K.current;if(!t||!n)return;const a={active:t,activatorEvent:n,collisions:r,delta:{x:de.x,y:de.y},over:o};(0,bt.unstable_batchedUpdates)((()=>{null==e||e(a),g({type:"onDragMove",event:a})}))}),[de.x,de.y]),(0,t.useEffect)((()=>{const{active:e,activatorEvent:t,collisions:n,droppableContainers:r,scrollAdjustedTranslate:o}=K.current;if(!e||null==L.current||!t||!o)return;const{onDragOver:a}=I.current,i=r.get(he),l=i&&i.rect.current?{id:i.id,rect:i.rect.current,data:i.data,disabled:i.disabled}:null,u={active:e,activatorEvent:t,collisions:n,delta:{x:o.x,y:o.y},over:l};(0,bt.unstable_batchedUpdates)((()=>{ve(l),null==a||a(u),g({type:"onDragOver",event:u})}))}),[he]),Tt((()=>{K.current={activatorEvent:D,active:R,activeNode:W,collisionRect:fe,collisions:pe,droppableRects:U,draggableNodes:k,draggingNode:J,draggingNodeRect:Z,droppableContainers:O,over:me,scrollableAncestors:oe,scrollAdjustedTranslate:de},P.current={initial:Z,translated:fe}}),[R,W,pe,fe,k,J,Z,U,O,me,oe,de]),function(e){let{acceleration:n,activator:r=Kn.Pointer,canScroll:o,draggingRect:a,enabled:i,interval:l=5,order:u=Xn.TreeOrder,pointerCoordinates:s,scrollableAncestors:c,scrollableAncestorRects:d,delta:f,threshold:p}=e;const h=function(e){let{delta:t,disabled:n}=e;const r=Nt(t);return Lt((e=>{if(n||!r||!e)return Gn;const o=Math.sign(t.x-r.x),a=Math.sign(t.y-r.y);return{x:{[En.Backward]:e.x[En.Backward]||-1===o,[En.Forward]:e.x[En.Forward]||1===o},y:{[En.Backward]:e.y[En.Backward]||-1===a,[En.Forward]:e.y[En.Forward]||1===a}}}),[n,t,r])}({delta:f,disabled:!i}),[m,v]=function(){const e=(0,t.useRef)(null);return[(0,t.useCallback)(((t,n)=>{e.current=setInterval(t,n)}),[]),(0,t.useCallback)((()=>{null!==e.current&&(clearInterval(e.current),e.current=null)}),[])]}(),y=(0,t.useRef)({x:0,y:0}),g=(0,t.useRef)({x:0,y:0}),b=(0,t.useMemo)((()=>{switch(r){case Kn.Pointer:return s?{top:s.y,bottom:s.y,left:s.x,right:s.x}:null;case Kn.DraggableRect:return a}}),[r,a,s]),w=(0,t.useRef)(null),E=(0,t.useCallback)((()=>{const e=w.current;if(!e)return;const t=y.current.x*g.current.x,n=y.current.y*g.current.y;e.scrollBy(t,n)}),[]),S=(0,t.useMemo)((()=>u===Xn.TreeOrder?[...c].reverse():c),[u,c]);(0,t.useEffect)((()=>{if(i&&c.length&&b){for(const e of S){if(!1===(null==o?void 0:o(e)))continue;const t=c.indexOf(e),r=d[t];if(!r)continue;const{direction:a,speed:i}=Cn(e,r,b,n,p);for(const e of["x","y"])h[e][a[e]]||(i[e]=0,a[e]=0);if(i.x>0||i.y>0)return v(),w.current=e,m(E,l),y.current=i,void(g.current=a)}y.current={x:0,y:0},g.current={x:0,y:0},v()}else v()}),[n,E,o,v,i,l,JSON.stringify(b),JSON.stringify(h),m,c,S,d,JSON.stringify(p)])}({...H,delta:C,draggingRect:fe,pointerCoordinates:le,scrollableAncestors:oe,scrollableAncestorRects:ae});const Ee=(0,t.useMemo)((()=>({active:R,activeNode:W,activeNodeRect:q,activatorEvent:D,collisions:pe,containerNodeRect:Y,dragOverlay:G,draggableNodes:k,droppableContainers:O,droppableRects:U,over:me,measureDroppableContainers:B,scrollableAncestors:oe,scrollableAncestorRects:ae,measuringConfiguration:A,measuringScheduled:$,windowRect:re})),[R,W,q,D,pe,Y,G,k,O,U,me,B,oe,ae,A,$,re]),Se=(0,t.useMemo)((()=>({activatorEvent:D,activators:we,active:R,activeNodeRect:q,ariaDescribedById:{draggable:j},dispatch:y,draggableNodes:k,over:me,measureDroppableContainers:B})),[D,we,R,q,y,j,k,me,B]);return t.createElement(qt.Provider,{value:b},t.createElement(vr.Provider,{value:Se},t.createElement(yr.Provider,{value:Ee},t.createElement(Sr.Provider,{value:ye},s)),t.createElement(wr,{disabled:!1===(null==l?void 0:l.restoreFocus)})),t.createElement(Xt,{...l,hiddenTextDescribedById:j}))})),Cr=(0,t.createContext)(null),Or="button",Tr="Droppable";function Pr(){return(0,t.useContext)(yr)}const Rr="Droppable",Lr={timeout:25};function _r(e){let{animation:n,children:r}=e;const[o,a]=(0,t.useState)(null),[i,l]=(0,t.useState)(null),u=Nt(r);return r||o||!u||a(u),Tt((()=>{if(!i)return;const e=null==o?void 0:o.key,t=null==o?void 0:o.props.id;null!=e&&null!=t?Promise.resolve(n(t,i)).then((()=>{a(null)})):a(null)}),[n,o,i]),t.createElement(t.Fragment,null,r,o?(0,t.cloneElement)(o,{ref:l}):null)}const Nr={x:0,y:0,scaleX:1,scaleY:1};function Dr(e){let{children:n}=e;return t.createElement(vr.Provider,{value:mr},t.createElement(Sr.Provider,{value:Nr},n))}const Mr={position:"fixed",touchAction:"none"},Ir=e=>At(e)?"transform 250ms ease":void 0,jr=(0,t.forwardRef)(((e,n)=>{let{as:r,activatorEvent:o,adjustScale:a,children:i,className:l,rect:u,style:s,transform:c,transition:d=Ir}=e;if(!u)return null;const f=a?c:{...c,scaleX:1,scaleY:1},p={...Mr,width:u.width,height:u.height,top:u.top,left:u.left,transform:Ut.Transform.toString(f),transformOrigin:a&&o?en(o,u):void 0,transition:"function"==typeof d?d(o):d,...s};return t.createElement(r,{className:l,style:p,ref:n},i)})),zr=e=>t=>{let{active:n,dragOverlay:r}=t;const o={},{styles:a,className:i}=e;if(null!=a&&a.active)for(const[e,t]of Object.entries(a.active))void 0!==t&&(o[e]=n.node.style.getPropertyValue(e),n.node.style.setProperty(e,t));if(null!=a&&a.dragOverlay)for(const[e,t]of Object.entries(a.dragOverlay))void 0!==t&&r.node.style.setProperty(e,t);return null!=i&&i.active&&n.node.classList.add(i.active),null!=i&&i.dragOverlay&&r.node.classList.add(i.dragOverlay),function(){for(const[e,t]of Object.entries(o))n.node.style.setProperty(e,t);null!=i&&i.active&&n.node.classList.remove(i.active)}},Ar={duration:250,easing:"ease",keyframes:e=>{let{transform:{initial:t,final:n}}=e;return[{transform:Ut.Transform.toString(t)},{transform:Ut.Transform.toString(n)}]},sideEffects:zr({styles:{active:{opacity:"0"}}})};let Fr=0;function Ur(e){return(0,t.useMemo)((()=>{if(null!=e)return Fr++,Fr}),[e])}const Br=t.memo((e=>{let{adjustScale:n=!1,children:r,dropAnimation:o,style:a,transition:i,modifiers:l,wrapperElement:u="div",className:s,zIndex:c=999}=e;const{activatorEvent:d,active:f,activeNodeRect:p,containerNodeRect:h,draggableNodes:m,droppableContainers:v,dragOverlay:y,over:g,measuringConfiguration:b,scrollableAncestors:w,scrollableAncestorRects:E,windowRect:S}=Pr(),x=(0,t.useContext)(Sr),k=Ur(null==f?void 0:f.id),C=Er(l,{activatorEvent:d,active:f,activeNodeRect:p,containerNodeRect:h,draggingNodeRect:y.rect,over:g,overlayNodeRect:y.rect,scrollableAncestors:w,scrollableAncestorRects:E,transform:x,windowRect:S}),O=tr(p),T=function(e){let{config:t,draggableNodes:n,droppableContainers:r,measuringConfiguration:o}=e;return Pt(((e,a)=>{if(null===t)return;const i=n.get(e);if(!i)return;const l=i.node.current;if(!l)return;const u=sr(a);if(!u)return;const{transform:s}=xt(a).getComputedStyle(a),c=dn(s);if(!c)return;const d="function"==typeof t?t:function(e){const{duration:t,easing:n,sideEffects:r,keyframes:o}={...Ar,...e};return e=>{let{active:a,dragOverlay:i,transform:l,...u}=e;if(!t)return;const s=i.rect.left-a.rect.left,c=i.rect.top-a.rect.top,d={scaleX:1!==l.scaleX?a.rect.width*l.scaleX/i.rect.width:1,scaleY:1!==l.scaleY?a.rect.height*l.scaleY/i.rect.height:1},f={x:l.x-s,y:l.y-c,...d},p=o({...u,active:a,dragOverlay:i,transform:{initial:l,final:f}}),[h]=p,m=p[p.length-1];if(JSON.stringify(h)===JSON.stringify(m))return;const v=null==r?void 0:r({active:a,dragOverlay:i,...u}),y=i.node.animate(p,{duration:t,easing:n,fill:"forwards"});return new Promise((e=>{y.onfinish=()=>{null==v||v(),e()}}))}}(t);return Pn(l,o.draggable.measure),d({active:{id:e,data:i.data,node:l,rect:o.draggable.measure(l)},draggableNodes:n,dragOverlay:{node:a,rect:o.dragOverlay.measure(u)},droppableContainers:r,measuringConfiguration:o,transform:c})}))}({config:o,draggableNodes:m,droppableContainers:v,measuringConfiguration:b}),P=O?y.setRef:void 0;return t.createElement(Dr,null,t.createElement(_r,{animation:T},f&&k?t.createElement(jr,{key:k,id:f.id,ref:P,as:u,activatorEvent:d,adjustScale:n,className:s,transition:i,rect:O,style:{zIndex:c,...a},transform:C},r):null))}));function $r(e,t,n){const r=e.slice();return r.splice(n<0?r.length+n:n,0,r.splice(t,1)[0]),r}function Wr(e,t){return e.reduce(((e,n,r)=>{const o=t.get(n);return o&&(e[r]=o),e}),Array(e.length))}function Vr(e){return null!==e&&e>=0}const Hr=e=>{let{rects:t,activeIndex:n,overIndex:r,index:o}=e;const a=$r(t,r,n),i=t[o],l=a[o];return l&&i?{x:l.left-i.left,y:l.top-i.top,scaleX:l.width/i.width,scaleY:l.height/i.height}:null},Qr=e=>{let t,n,{activeIndex:r,index:o,rects:a,overIndex:i}=e;return o===r&&(t=a[o],n=a[i]),o===i&&(t=a[o],n=a[r]),n&&t?{x:n.left-t.left,y:n.top-t.top,scaleX:n.width/t.width,scaleY:n.height/t.height}:null},qr="Sortable",Yr=t.createContext({activeIndex:-1,containerId:qr,disableTransforms:!1,items:[],overIndex:-1,useDragOverlay:!1,sortedRects:[],strategy:Hr,disabled:{draggable:!1,droppable:!1}});function Kr(e){let{children:n,id:r,items:o,strategy:a=Hr,disabled:i=!1}=e;const{active:l,dragOverlay:u,droppableRects:s,over:c,measureDroppableContainers:d}=Pr(),f=Mt(qr,r),p=Boolean(null!==u.rect),h=(0,t.useMemo)((()=>o.map((e=>"object"==typeof e&&"id"in e?e.id:e))),[o]),m=null!=l,v=l?h.indexOf(l.id):-1,y=c?h.indexOf(c.id):-1,g=(0,t.useRef)(h),b=!function(e,t){if(e===t)return!0;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(h,g.current),w=-1!==y&&-1===v||b,E=function(e){return"boolean"==typeof e?{draggable:e,droppable:e}:e}(i);Tt((()=>{b&&m&&d(h)}),[b,h,m,d]),(0,t.useEffect)((()=>{g.current=h}),[h]);const S=(0,t.useMemo)((()=>({activeIndex:v,containerId:f,disabled:E,disableTransforms:w,items:h,overIndex:y,useDragOverlay:p,sortedRects:Wr(h,s),strategy:a})),[v,f,E.draggable,E.droppable,w,h,y,s,p,a]);return t.createElement(Yr.Provider,{value:S},n)}const Xr=e=>{let{id:t,items:n,activeIndex:r,overIndex:o}=e;return $r(n,r,o).indexOf(t)},Gr=e=>{let{containerId:t,isSorting:n,wasDragging:r,index:o,items:a,newIndex:i,previousItems:l,previousContainerId:u,transition:s}=e;return!(!s||!r||l!==a&&o===i||!n&&(i===o||t!==u))},Jr={duration:200,easing:"ease"},Zr="transform",eo=Ut.Transition.toString({property:Zr,duration:0,easing:"linear"}),to={roleDescription:"sortable"};function no(e){let{animateLayoutChanges:n=Gr,attributes:r,disabled:o,data:a,getNewIndex:i=Xr,id:l,strategy:u,resizeObserverConfig:s,transition:c=Jr}=e;const{items:d,containerId:f,activeIndex:p,disabled:h,disableTransforms:m,sortedRects:v,overIndex:y,useDragOverlay:g,strategy:b}=(0,t.useContext)(Yr),w=function(e,t){var n,r;return"boolean"==typeof e?{draggable:e,droppable:!1}:{draggable:null!=(n=null==e?void 0:e.draggable)?n:t.draggable,droppable:null!=(r=null==e?void 0:e.droppable)?r:t.droppable}}(o,h),E=d.indexOf(l),S=(0,t.useMemo)((()=>({sortable:{containerId:f,index:E,items:d},...a})),[f,a,E,d]),x=(0,t.useMemo)((()=>d.slice(d.indexOf(l))),[d,l]),{rect:k,node:C,isOver:O,setNodeRef:T}=function(e){let{data:n,disabled:r=!1,id:o,resizeObserverConfig:a}=e;const i=Mt(Rr),{active:l,dispatch:u,over:s,measureDroppableContainers:c}=(0,t.useContext)(vr),d=(0,t.useRef)({disabled:r}),f=(0,t.useRef)(!1),p=(0,t.useRef)(null),h=(0,t.useRef)(null),{disabled:m,updateMeasurementsFor:v,timeout:y}={...Lr,...a},g=Rt(null!=v?v:o),b=nr({callback:(0,t.useCallback)((()=>{f.current?(null!=h.current&&clearTimeout(h.current),h.current=setTimeout((()=>{c(Array.isArray(g.current)?g.current:[g.current]),h.current=null}),y)):f.current=!0}),[y]),disabled:m||!l}),w=(0,t.useCallback)(((e,t)=>{b&&(t&&(b.unobserve(t),f.current=!1),e&&b.observe(e))}),[b]),[E,S]=_t(w),x=Rt(n);return(0,t.useEffect)((()=>{b&&E.current&&(b.disconnect(),f.current=!1,b.observe(E.current))}),[E,b]),Tt((()=>(u({type:Gt.RegisterDroppable,element:{id:o,key:i,disabled:r,node:E,rect:p,data:x}}),()=>u({type:Gt.UnregisterDroppable,key:i,id:o}))),[o]),(0,t.useEffect)((()=>{r!==d.current.disabled&&(u({type:Gt.SetDroppableDisabled,id:o,key:i,disabled:r}),d.current.disabled=r)}),[o,i,r,u]),{active:l,rect:p,isOver:(null==s?void 0:s.id)===o,node:E,over:s,setNodeRef:S}}({id:l,data:S,disabled:w.droppable,resizeObserverConfig:{updateMeasurementsFor:x,...s}}),{active:P,activatorEvent:R,activeNodeRect:L,attributes:_,setNodeRef:N,listeners:D,isDragging:M,over:I,setActivatorNodeRef:j,transform:z}=function(e){let{id:n,data:r,disabled:o=!1,attributes:a}=e;const i=Mt(Tr),{activators:l,activatorEvent:u,active:s,activeNodeRect:c,ariaDescribedById:d,draggableNodes:f,over:p}=(0,t.useContext)(vr),{role:h=Or,roleDescription:m="draggable",tabIndex:v=0}=null!=a?a:{},y=(null==s?void 0:s.id)===n,g=(0,t.useContext)(y?Sr:Cr),[b,w]=_t(),[E,S]=_t(),x=function(e,n){return(0,t.useMemo)((()=>e.reduce(((e,t)=>{let{eventName:r,handler:o}=t;return e[r]=e=>{o(e,n)},e}),{})),[e,n])}(l,n),k=Rt(r);return Tt((()=>(f.set(n,{id:n,key:i,node:b,activatorNode:E,data:k}),()=>{const e=f.get(n);e&&e.key===i&&f.delete(n)})),[f,n]),{active:s,activatorEvent:u,activeNodeRect:c,attributes:(0,t.useMemo)((()=>({role:h,tabIndex:v,"aria-disabled":o,"aria-pressed":!(!y||h!==Or)||void 0,"aria-roledescription":m,"aria-describedby":d.draggable})),[o,h,v,y,m,d.draggable]),isDragging:y,listeners:o?void 0:x,node:b,over:p,setNodeRef:w,setActivatorNodeRef:S,transform:g}}({id:l,data:S,attributes:{...to,...r},disabled:w.draggable}),A=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return(0,t.useMemo)((()=>e=>{n.forEach((t=>t(e)))}),n)}(T,N),F=Boolean(P),U=F&&!m&&Vr(p)&&Vr(y),B=!g&&M,$=B&&U?z:null,W=U?null!=$?$:(null!=u?u:b)({rects:v,activeNodeRect:L,activeIndex:p,overIndex:y,index:E}):null,V=Vr(p)&&Vr(y)?i({id:l,items:d,activeIndex:p,overIndex:y}):E,H=null==P?void 0:P.id,Q=(0,t.useRef)({activeId:H,items:d,newIndex:V,containerId:f}),q=d!==Q.current.items,Y=n({active:P,containerId:f,isDragging:M,isSorting:F,id:l,index:E,items:d,newIndex:Q.current.newIndex,previousItems:Q.current.items,previousContainerId:Q.current.containerId,transition:c,wasDragging:null!=Q.current.activeId}),K=function(e){let{disabled:n,index:r,node:o,rect:a}=e;const[i,l]=(0,t.useState)(null),u=(0,t.useRef)(r);return Tt((()=>{if(!n&&r!==u.current&&o.current){const e=a.current;if(e){const t=pn(o.current,{ignoreTransform:!0}),n={x:e.left-t.left,y:e.top-t.top,scaleX:e.width/t.width,scaleY:e.height/t.height};(n.x||n.y)&&l(n)}}r!==u.current&&(u.current=r)}),[n,r,o,a]),(0,t.useEffect)((()=>{i&&l(null)}),[i]),i}({disabled:!Y,index:E,node:C,rect:k});return(0,t.useEffect)((()=>{F&&Q.current.newIndex!==V&&(Q.current.newIndex=V),f!==Q.current.containerId&&(Q.current.containerId=f),d!==Q.current.items&&(Q.current.items=d)}),[F,V,f,d]),(0,t.useEffect)((()=>{if(H===Q.current.activeId)return;if(H&&!Q.current.activeId)return void(Q.current.activeId=H);const e=setTimeout((()=>{Q.current.activeId=H}),50);return()=>clearTimeout(e)}),[H]),{active:P,activeIndex:p,attributes:_,data:S,rect:k,index:E,newIndex:V,items:d,isOver:O,isSorting:F,isDragging:M,listeners:D,node:C,overIndex:y,over:I,setNodeRef:A,setActivatorNodeRef:j,setDroppableNodeRef:T,setDraggableNodeRef:N,transform:null!=K?K:W,transition:K||q&&Q.current.newIndex===E?eo:B&&!At(R)||!c?void 0:F||Y?Ut.Transition.toString({...c,property:Zr}):void 0}}Mn.Down,Mn.Right,Mn.Up,Mn.Left;var ro=o(679);function oo(){return t.createElement("div",{className:"d-flex justify-content-center align-items-center"},t.createElement("h2",null,"Loading..."))}function ao(){return ao=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ao.apply(this,arguments)}function io(e){var n=e.id,r=e.src,o=e.alt,a=no({id:n}),i=a.attributes,l=a.listeners,u=a.setNodeRef,s=a.transform,c=a.transition,d={transform:Ut.Transform.toString(s),transition:c,cursor:"grab",zIndex:1,margin:"0.5rem",backgroundColor:"rgba(0, 0, 0, 0.3)",aspectRatio:"1/.7"};return t.createElement("div",ao({ref:u},i,l,{style:d,className:"d-flex flex-wrap justify-content-center align-items-center"}),t.createElement(ro.LazyLoadImage,{src:r,width:"300",alt:o,effect:"blur",placeholderSrc:oo}))}function lo(e){return lo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},lo(e)}function uo(){uo=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var a=t&&t.prototype instanceof y?t:y,i=Object.create(a.prototype),l=new L(r||[]);return o(i,"_invoke",{value:O(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var f="suspendedStart",p="suspendedYield",h="executing",m="completed",v={};function y(){}function g(){}function b(){}var w={};s(w,i,(function(){return this}));var E=Object.getPrototypeOf,S=E&&E(E(_([])));S&&S!==n&&r.call(S,i)&&(w=S);var x=b.prototype=y.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var u=d(e[o],e,a);if("throw"!==u.type){var s=u.arg,c=s.value;return c&&"object"==lo(c)&&r.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(c).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function O(t,n,r){var o=f;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var u=T(l,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var s=d(t,n,r);if("normal"===s.type){if(o=r.done?m:p,s.arg===v)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=m,r.method="throw",r.arg=s.arg)}}}function T(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,T(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var a=d(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,v;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function R(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(lo(t)+" is not iterable")}return g.prototype=b,o(x,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=s(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,u,"GeneratorFunction")),e.prototype=Object.create(x),e},t.awrap=function(e){return{__await:e}},k(C.prototype),s(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(c(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(x),s(x,u,"Generator"),s(x,i,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(R),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),R(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;R(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function so(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}var co=function(){var e,t=(e=uo().mark((function e(t){var n,r,o,a;return uo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t?"https://api.pexels.com/v1/search?query=".concat(t,"&per_page=24page=1"):"https://api.pexels.com/v1/curated?per_page=24page=1",e.prev=1,e.next=4,fetch(n,{headers:{Accept:"application/json",Authorization:"7fQk0TG3hoyDmB691bLA045LeFQYs8E1styCrV3rTcDJsg5VGozmBlzz"}});case 4:return r=e.sent,e.next=7,r.json();case 7:return o=e.sent,a=o.photos,e.abrupt("return",a);case 12:e.prev=12,e.t0=e.catch(1),console.log("Error fetching photos");case 15:case"end":return e.stop()}}),e,null,[[1,12]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){so(a,r,o,i,l,"next",e)}function l(e){so(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();function fo(e){return fo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fo(e)}function po(){po=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var a=t&&t.prototype instanceof y?t:y,i=Object.create(a.prototype),l=new L(r||[]);return o(i,"_invoke",{value:O(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var f="suspendedStart",p="suspendedYield",h="executing",m="completed",v={};function y(){}function g(){}function b(){}var w={};s(w,i,(function(){return this}));var E=Object.getPrototypeOf,S=E&&E(E(_([])));S&&S!==n&&r.call(S,i)&&(w=S);var x=b.prototype=y.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var u=d(e[o],e,a);if("throw"!==u.type){var s=u.arg,c=s.value;return c&&"object"==fo(c)&&r.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(c).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function O(t,n,r){var o=f;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var u=T(l,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var s=d(t,n,r);if("normal"===s.type){if(o=r.done?m:p,s.arg===v)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=m,r.method="throw",r.arg=s.arg)}}}function T(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,T(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var a=d(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,v;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function R(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(fo(t)+" is not iterable")}return g.prototype=b,o(x,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=s(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,u,"GeneratorFunction")),e.prototype=Object.create(x),e},t.awrap=function(e){return{__await:e}},k(C.prototype),s(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(c(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(x),s(x,u,"Generator"),s(x,i,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(R),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),R(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;R(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function ho(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return mo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?mo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function mo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function vo(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function yo(){var e;return e=po().mark((function e(t){var n,r,o,a;return po().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.request,r=new URL(n.url),o=r.searchParams.get("topic"),e.next=5,co(o);case 5:return a=e.sent,e.abrupt("return",{photos:a,param:o});case 7:case"end":return e.stop()}}),e)})),yo=function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){vo(a,r,o,i,l,"next",e)}function l(e){vo(a,r,o,i,l,"throw",e)}i(void 0)}))},yo.apply(this,arguments)}function go(){var e=function(){let e=He(Ve.UseLoaderData),t=Qe(Ve.UseLoaderData);if(!e.errors||null==e.errors[t])return e.loaderData[t];console.error("You cannot `useLoaderData` in an errorElement (routeId: "+t+")")}(),n=e.photos,r=e.param,o=ho((0,t.useState)(n),2),a=o[0],i=o[1],l=ho((0,t.useState)(null),2),u=l[0],s=l[1],c=gt(),d=He(Ve.UseNavigation).navigation,f=d.location&&new URLSearchParams(d.location.search).has("topic"),p=je();return(0,t.useEffect)((function(){document.getElementById("param").value=r,r?i(n):p("/")}),[r]),t.createElement(t.Fragment,null,t.createElement("nav",{className:"navbar navbar-expand-lg bg-body-tertiary"},t.createElement("div",{className:"container-fluid"},t.createElement(pt,{className:"navbar-brand",to:"/"},"Photo Vallery"),t.createElement(ht,{className:"d-flex",role:"search"},t.createElement("input",{id:"param",name:"topic",className:f?"loading ":"form-control me-2",type:"search",placeholder:"Search","aria-label":"Search",defaultValue:r,onChange:function(e){var t=null==r;c(e.currentTarget.form,{replace:!t})}})),t.createElement(pt,{className:"nav-link",to:"/",onClick:function(){sessionStorage.removeItem("token"),window.location="/"}},"Log Out"))),t.createElement("div",{className:"container d-flex flex-wrap justify-content-around align-items-center"},t.createElement(kr,{collisionDetection:on,onDragEnd:function(e){if(e.over&&e.active.id!==e.over.id){var t=a.findIndex((function(t){return t.id===e.over.id})),n=a.findIndex((function(t){return t.id===e.active.id}));return i((function(e){return $r(e,n,t)}))}s(null)},onDragStart:function(e){s(e.active.id)}},t.createElement(Kr,{items:a,strategy:Qr},a.map((function(e){return t.createElement(io,{key:e.id,id:e.id,src:e.src.landscape,alt:e.alt})}))),t.createElement(Br,null,u?t.createElement(io,{id:u,src:a.find((function(e){return e.id===u})).src.landscape,alt:a.find((function(e){return e.id===u})).alt}):null))))}var bo=o(697),wo=o.n(bo);function Eo(e){return Eo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Eo(e)}function So(){So=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var a=t&&t.prototype instanceof y?t:y,i=Object.create(a.prototype),l=new L(r||[]);return o(i,"_invoke",{value:O(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var f="suspendedStart",p="suspendedYield",h="executing",m="completed",v={};function y(){}function g(){}function b(){}var w={};s(w,i,(function(){return this}));var E=Object.getPrototypeOf,S=E&&E(E(_([])));S&&S!==n&&r.call(S,i)&&(w=S);var x=b.prototype=y.prototype=Object.create(w);function k(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(o,a,i,l){var u=d(e[o],e,a);if("throw"!==u.type){var s=u.arg,c=s.value;return c&&"object"==Eo(c)&&r.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(c).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function O(t,n,r){var o=f;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var u=T(l,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var s=d(t,n,r);if("normal"===s.type){if(o=r.done?m:p,s.arg===v)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=m,r.method="throw",r.arg=s.arg)}}}function T(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,T(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var a=d(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,v;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function R(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Eo(t)+" is not iterable")}return g.prototype=b,o(x,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:g,configurable:!0}),g.displayName=s(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,u,"GeneratorFunction")),e.prototype=Object.create(x),e},t.awrap=function(e){return{__await:e}},k(C.prototype),s(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new C(c(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(x),s(x,u,"Generator"),s(x,i,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(R),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),R(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;R(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function xo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ko(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ko(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ko(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Co(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Oo(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Co(a,r,o,i,l,"next",e)}function l(e){Co(a,r,o,i,l,"throw",e)}i(void 0)}))}}function To(e){return Po.apply(this,arguments)}function Po(){return(Po=Oo(So().mark((function e(t){return So().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("user@example.com"!==t.username||"1Password"!==t.password){e.next=2;break}return e.abrupt("return",fetch("http://localhost:8080/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then((function(e){if(!e.ok)throw new Error("Network response was not ok");return e.json()})).catch((function(e){console.log(e)})));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Ro(e){var n=e.setToken,r=xo((0,t.useState)(""),2),o=r[0],a=r[1],i=xo((0,t.useState)(""),2),l=i[0],u=i[1],s=function(){var e=Oo(So().mark((function e(t){var r;return So().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),e.next=3,To({username:o,password:l});case 3:(r=e.sent)&&n(r);case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();return t.createElement("div",{className:"d-flex justify-content-center align-items-center",style:{height:"100vh"}},t.createElement("form",{className:"d-flex flex-column justfy-content-center align-items-center",onSubmit:s},t.createElement("h1",null,"LogIn"),t.createElement("div",{className:"mb-3"},t.createElement("label",{htmlFor:"username",className:"visually-hidden"},"Username"),t.createElement("input",{type:"text",id:"username",className:"form-control-lg",value:o,placeholder:"Enter username...",onChange:function(e){return a(e.target.value)},required:!0}),t.createElement("div",{className:"form-text"},"Enter a valid username.")),t.createElement("div",{className:"mb-3"},t.createElement("label",{htmlFor:"password",className:"visually-hidden"},"Password"),t.createElement("input",{type:"password",id:"password",className:"form-control-lg",placeholder:"password",onChange:function(e){return u(e.target.value)},required:!0}),t.createElement("div",{className:"form-text"},"Enter a valid password.")),t.createElement("button",{type:"submit",className:"btn btn-primary"},"Log In")))}function Lo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _o(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=_o(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}Ro.propTypes={setToken:wo().func.isRequired};const No=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=_o(e))&&(r&&(r+=" "),r+=t);return r},Do=e=>"number"==typeof e&&!isNaN(e),Mo=e=>"string"==typeof e,Io=e=>"function"==typeof e,jo=e=>Mo(e)||Io(e)?e:null,zo=e=>(0,t.isValidElement)(e)||Mo(e)||Io(e)||Do(e);function Ao(e){let{enter:n,exit:r,appendPosition:o=!1,collapse:a=!0,collapseDuration:i=300}=e;return function(e){let{children:l,position:u,preventExitTransition:s,done:c,nodeRef:d,isIn:f}=e;const p=o?`${n}--${u}`:n,h=o?`${r}--${u}`:r,m=(0,t.useRef)(0);return(0,t.useLayoutEffect)((()=>{const e=d.current,t=p.split(" "),n=r=>{r.target===d.current&&(e.dispatchEvent(new Event("d")),e.removeEventListener("animationend",n),e.removeEventListener("animationcancel",n),0===m.current&&"animationcancel"!==r.type&&e.classList.remove(...t))};e.classList.add(...t),e.addEventListener("animationend",n),e.addEventListener("animationcancel",n)}),[]),(0,t.useEffect)((()=>{const e=d.current,t=()=>{e.removeEventListener("animationend",t),a?function(e,t,n){void 0===n&&(n=300);const{scrollHeight:r,style:o}=e;requestAnimationFrame((()=>{o.minHeight="initial",o.height=r+"px",o.transition=`all ${n}ms`,requestAnimationFrame((()=>{o.height="0",o.padding="0",o.margin="0",setTimeout(t,n)}))}))}(e,c,i):c()};f||(s?t():(m.current=1,e.className+=` ${h}`,e.addEventListener("animationend",t)))}),[f]),t.createElement(t.Fragment,null,l)}}function Fo(e,t){return null!=e?{content:e.content,containerId:e.props.containerId,id:e.props.toastId,theme:e.props.theme,type:e.props.type,data:e.props.data||{},isLoading:e.props.isLoading,icon:e.props.icon,status:t}:{}}const Uo={list:new Map,emitQueue:new Map,on(e,t){return this.list.has(e)||this.list.set(e,[]),this.list.get(e).push(t),this},off(e,t){if(t){const n=this.list.get(e).filter((e=>e!==t));return this.list.set(e,n),this}return this.list.delete(e),this},cancelEmit(e){const t=this.emitQueue.get(e);return t&&(t.forEach(clearTimeout),this.emitQueue.delete(e)),this},emit(e){this.list.has(e)&&this.list.get(e).forEach((t=>{const n=setTimeout((()=>{t(...[].slice.call(arguments,1))}),0);this.emitQueue.has(e)||this.emitQueue.set(e,[]),this.emitQueue.get(e).push(n)}))}},Bo=e=>{let{theme:n,type:r,...o}=e;return t.createElement("svg",{viewBox:"0 0 24 24",width:"100%",height:"100%",fill:"colored"===n?"currentColor":`var(--toastify-icon-color-${r})`,...o})},$o={info:function(e){return t.createElement(Bo,{...e},t.createElement("path",{d:"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z"}))},warning:function(e){return t.createElement(Bo,{...e},t.createElement("path",{d:"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z"}))},success:function(e){return t.createElement(Bo,{...e},t.createElement("path",{d:"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z"}))},error:function(e){return t.createElement(Bo,{...e},t.createElement("path",{d:"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z"}))},spinner:function(){return t.createElement("div",{className:"Toastify__spinner"})}};function Wo(e){const[,n]=(0,t.useReducer)((e=>e+1),0),[r,o]=(0,t.useState)([]),a=(0,t.useRef)(null),i=(0,t.useRef)(new Map).current,l=e=>-1!==r.indexOf(e),u=(0,t.useRef)({toastKey:1,displayedToast:0,count:0,queue:[],props:e,containerId:null,isToastActive:l,getToast:e=>i.get(e)}).current;function s(e){let{containerId:t}=e;const{limit:n}=u.props;!n||t&&u.containerId!==t||(u.count-=u.queue.length,u.queue=[])}function c(e){o((t=>null==e?[]:t.filter((t=>t!==e))))}function d(){const{toastContent:e,toastProps:t,staleId:n}=u.queue.shift();p(e,t,n)}function f(e,r){let{delay:o,staleId:l,...s}=r;if(!zo(e)||function(e){return!a.current||u.props.enableMultiContainer&&e.containerId!==u.props.containerId||i.has(e.toastId)&&null==e.updateId}(s))return;const{toastId:f,updateId:h,data:m}=s,{props:v}=u,y=()=>c(f),g=null==h;g&&u.count++;const b={...v,style:v.toastStyle,key:u.toastKey++,...Object.fromEntries(Object.entries(s).filter((e=>{let[t,n]=e;return null!=n}))),toastId:f,updateId:h,data:m,closeToast:y,isIn:!1,className:jo(s.className||v.toastClassName),bodyClassName:jo(s.bodyClassName||v.bodyClassName),progressClassName:jo(s.progressClassName||v.progressClassName),autoClose:!s.isLoading&&(w=s.autoClose,E=v.autoClose,!1===w||Do(w)&&w>0?w:E),deleteToast(){const e=Fo(i.get(f),"removed");i.delete(f),Uo.emit(4,e);const t=u.queue.length;if(u.count=null==f?u.count-u.displayedToast:u.count-1,u.count<0&&(u.count=0),t>0){const e=null==f?u.props.limit:1;if(1===t||1===e)u.displayedToast++,d();else{const n=e>t?t:e;u.displayedToast=n;for(let e=0;e<n;e++)d()}}else n()}};var w,E;b.iconOut=function(e){let{theme:n,type:r,isLoading:o,icon:a}=e,i=null;const l={theme:n,type:r};return!1===a||(Io(a)?i=a(l):(0,t.isValidElement)(a)?i=(0,t.cloneElement)(a,l):Mo(a)||Do(a)?i=a:o?i=$o.spinner():(e=>e in $o)(r)&&(i=$o[r](l))),i}(b),Io(s.onOpen)&&(b.onOpen=s.onOpen),Io(s.onClose)&&(b.onClose=s.onClose),b.closeButton=v.closeButton,!1===s.closeButton||zo(s.closeButton)?b.closeButton=s.closeButton:!0===s.closeButton&&(b.closeButton=!zo(v.closeButton)||v.closeButton);let S=e;(0,t.isValidElement)(e)&&!Mo(e.type)?S=(0,t.cloneElement)(e,{closeToast:y,toastProps:b,data:m}):Io(e)&&(S=e({closeToast:y,toastProps:b,data:m})),v.limit&&v.limit>0&&u.count>v.limit&&g?u.queue.push({toastContent:S,toastProps:b,staleId:l}):Do(o)?setTimeout((()=>{p(S,b,l)}),o):p(S,b,l)}function p(e,t,n){const{toastId:r}=t;n&&i.delete(n);const a={content:e,props:t};i.set(r,a),o((e=>[...e,r].filter((e=>e!==n)))),Uo.emit(4,Fo(a,null==a.props.updateId?"added":"updated"))}return(0,t.useEffect)((()=>(u.containerId=e.containerId,Uo.cancelEmit(3).on(0,f).on(1,(e=>a.current&&c(e))).on(5,s).emit(2,u),()=>{i.clear(),Uo.emit(3,u)})),[]),(0,t.useEffect)((()=>{u.props=e,u.isToastActive=l,u.displayedToast=r.length})),{getToastToRender:function(t){const n=new Map,r=Array.from(i.values());return e.newestOnTop&&r.reverse(),r.forEach((e=>{const{position:t}=e.props;n.has(t)||n.set(t,[]),n.get(t).push(e)})),Array.from(n,(e=>t(e[0],e[1])))},containerRef:a,isToastActive:l}}function Vo(e){return e.targetTouches&&e.targetTouches.length>=1?e.targetTouches[0].clientX:e.clientX}function Ho(e){return e.targetTouches&&e.targetTouches.length>=1?e.targetTouches[0].clientY:e.clientY}function Qo(e){const[n,r]=(0,t.useState)(!1),[o,a]=(0,t.useState)(!1),i=(0,t.useRef)(null),l=(0,t.useRef)({start:0,x:0,y:0,delta:0,removalDistance:0,canCloseOnClick:!0,canDrag:!1,boundingRect:null,didMove:!1}).current,u=(0,t.useRef)(e),{autoClose:s,pauseOnHover:c,closeToast:d,onClick:f,closeOnClick:p}=e;function h(t){if(e.draggable){"touchstart"===t.nativeEvent.type&&t.nativeEvent.preventDefault(),l.didMove=!1,document.addEventListener("mousemove",g),document.addEventListener("mouseup",b),document.addEventListener("touchmove",g),document.addEventListener("touchend",b);const n=i.current;l.canCloseOnClick=!0,l.canDrag=!0,l.boundingRect=n.getBoundingClientRect(),n.style.transition="",l.x=Vo(t.nativeEvent),l.y=Ho(t.nativeEvent),"x"===e.draggableDirection?(l.start=l.x,l.removalDistance=n.offsetWidth*(e.draggablePercent/100)):(l.start=l.y,l.removalDistance=n.offsetHeight*(80===e.draggablePercent?1.5*e.draggablePercent:e.draggablePercent/100))}}function m(t){if(l.boundingRect){const{top:n,bottom:r,left:o,right:a}=l.boundingRect;"touchend"!==t.nativeEvent.type&&e.pauseOnHover&&l.x>=o&&l.x<=a&&l.y>=n&&l.y<=r?y():v()}}function v(){r(!0)}function y(){r(!1)}function g(t){const r=i.current;l.canDrag&&r&&(l.didMove=!0,n&&y(),l.x=Vo(t),l.y=Ho(t),l.delta="x"===e.draggableDirection?l.x-l.start:l.y-l.start,l.start!==l.x&&(l.canCloseOnClick=!1),r.style.transform=`translate${e.draggableDirection}(${l.delta}px)`,r.style.opacity=""+(1-Math.abs(l.delta/l.removalDistance)))}function b(){document.removeEventListener("mousemove",g),document.removeEventListener("mouseup",b),document.removeEventListener("touchmove",g),document.removeEventListener("touchend",b);const t=i.current;if(l.canDrag&&l.didMove&&t){if(l.canDrag=!1,Math.abs(l.delta)>l.removalDistance)return a(!0),void e.closeToast();t.style.transition="transform 0.2s, opacity 0.2s",t.style.transform=`translate${e.draggableDirection}(0)`,t.style.opacity="1"}}(0,t.useEffect)((()=>{u.current=e})),(0,t.useEffect)((()=>(i.current&&i.current.addEventListener("d",v,{once:!0}),Io(e.onOpen)&&e.onOpen((0,t.isValidElement)(e.children)&&e.children.props),()=>{const e=u.current;Io(e.onClose)&&e.onClose((0,t.isValidElement)(e.children)&&e.children.props)})),[]),(0,t.useEffect)((()=>(e.pauseOnFocusLoss&&(document.hasFocus()||y(),window.addEventListener("focus",v),window.addEventListener("blur",y)),()=>{e.pauseOnFocusLoss&&(window.removeEventListener("focus",v),window.removeEventListener("blur",y))})),[e.pauseOnFocusLoss]);const w={onMouseDown:h,onTouchStart:h,onMouseUp:m,onTouchEnd:m};return s&&c&&(w.onMouseEnter=y,w.onMouseLeave=v),p&&(w.onClick=e=>{f&&f(e),l.canCloseOnClick&&d()}),{playToast:v,pauseToast:y,isRunning:n,preventExitTransition:o,toastRef:i,eventHandlers:w}}function qo(e){let{closeToast:n,theme:r,ariaLabel:o="close"}=e;return t.createElement("button",{className:`Toastify__close-button Toastify__close-button--${r}`,type:"button",onClick:e=>{e.stopPropagation(),n(e)},"aria-label":o},t.createElement("svg",{"aria-hidden":"true",viewBox:"0 0 14 16"},t.createElement("path",{fillRule:"evenodd",d:"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z"})))}function Yo(e){let{delay:n,isRunning:r,closeToast:o,type:a="default",hide:i,className:l,style:u,controlledProgress:s,progress:c,rtl:d,isIn:f,theme:p}=e;const h=i||s&&0===c,m={...u,animationDuration:`${n}ms`,animationPlayState:r?"running":"paused",opacity:h?0:1};s&&(m.transform=`scaleX(${c})`);const v=No("Toastify__progress-bar",s?"Toastify__progress-bar--controlled":"Toastify__progress-bar--animated",`Toastify__progress-bar-theme--${p}`,`Toastify__progress-bar--${a}`,{"Toastify__progress-bar--rtl":d}),y=Io(l)?l({rtl:d,type:a,defaultClassName:v}):No(v,l);return t.createElement("div",{role:"progressbar","aria-hidden":h?"true":"false","aria-label":"notification timer",className:y,style:m,[s&&c>=1?"onTransitionEnd":"onAnimationEnd"]:s&&c<1?null:()=>{f&&o()}})}const Ko=e=>{const{isRunning:n,preventExitTransition:r,toastRef:o,eventHandlers:a}=Qo(e),{closeButton:i,children:l,autoClose:u,onClick:s,type:c,hideProgressBar:d,closeToast:f,transition:p,position:h,className:m,style:v,bodyClassName:y,bodyStyle:g,progressClassName:b,progressStyle:w,updateId:E,role:S,progress:x,rtl:k,toastId:C,deleteToast:O,isIn:T,isLoading:P,iconOut:R,closeOnClick:L,theme:_}=e,N=No("Toastify__toast",`Toastify__toast-theme--${_}`,`Toastify__toast--${c}`,{"Toastify__toast--rtl":k},{"Toastify__toast--close-on-click":L}),D=Io(m)?m({rtl:k,position:h,type:c,defaultClassName:N}):No(N,m),M=!!x||!u,I={closeToast:f,type:c,theme:_};let j=null;return!1===i||(j=Io(i)?i(I):(0,t.isValidElement)(i)?(0,t.cloneElement)(i,I):qo(I)),t.createElement(p,{isIn:T,done:O,position:h,preventExitTransition:r,nodeRef:o},t.createElement("div",{id:C,onClick:s,className:D,...a,style:v,ref:o},t.createElement("div",{...T&&{role:S},className:Io(y)?y({type:c}):No("Toastify__toast-body",y),style:g},null!=R&&t.createElement("div",{className:No("Toastify__toast-icon",{"Toastify--animate-icon Toastify__zoom-enter":!P})},R),t.createElement("div",null,l)),j,t.createElement(Yo,{...E&&!M?{key:`pb-${E}`}:{},rtl:k,theme:_,delay:u,isRunning:n,isIn:T,closeToast:f,hide:d,type:c,style:w,className:b,controlledProgress:M,progress:x||0})))},Xo=function(e,t){return void 0===t&&(t=!1),{enter:`Toastify--animate Toastify__${e}-enter`,exit:`Toastify--animate Toastify__${e}-exit`,appendPosition:t}},Go=Ao(Xo("bounce",!0)),Jo=(Ao(Xo("slide",!0)),Ao(Xo("zoom")),Ao(Xo("flip")),(0,t.forwardRef)(((e,n)=>{const{getToastToRender:r,containerRef:o,isToastActive:a}=Wo(e),{className:i,style:l,rtl:u,containerId:s}=e;function c(e){const t=No("Toastify__toast-container",`Toastify__toast-container--${e}`,{"Toastify__toast-container--rtl":u});return Io(i)?i({position:e,rtl:u,defaultClassName:t}):No(t,jo(i))}return(0,t.useEffect)((()=>{n&&(n.current=o.current)}),[]),t.createElement("div",{ref:o,className:"Toastify",id:s},r(((e,n)=>{const r=n.length?{...l}:{...l,pointerEvents:"none"};return t.createElement("div",{className:c(e),style:r,key:`container-${e}`},n.map(((e,r)=>{let{content:o,props:i}=e;return t.createElement(Ko,{...i,isIn:a(i.toastId),style:{...i.style,"--nth":r+1,"--len":n.length},key:`toast-${i.key}`},o)})))})))})));Jo.displayName="ToastContainer",Jo.defaultProps={position:"top-right",transition:Go,autoClose:5e3,closeButton:qo,pauseOnHover:!0,pauseOnFocusLoss:!0,closeOnClick:!0,draggable:!0,draggablePercent:80,draggableDirection:"x",role:"alert",theme:"light"};let Zo,ea=new Map,ta=[],na=1;function ra(){return""+na++}function oa(e){return e&&(Mo(e.toastId)||Do(e.toastId))?e.toastId:ra()}function aa(e,t){return ea.size>0?Uo.emit(0,e,t):ta.push({content:e,options:t}),t.toastId}function ia(e,t){return{...t,type:t&&t.type||e,toastId:oa(t)}}function la(e){return(t,n)=>aa(t,ia(e,n))}function ua(e,t){return aa(e,ia("default",t))}function sa(e){var n=e.children,r=function(){var e,n,r,o,a=(r=(0,t.useState)((e=sessionStorage.getItem("token"),null==(n=JSON.parse(e))?void 0:n.token)),o=2,function(e){if(Array.isArray(e))return e}(r)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(r,o)||function(e,t){if(e){if("string"==typeof e)return Lo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Lo(e,t):void 0}}(r,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[0],l=a[1];return{setToken:function(e){sessionStorage.setItem("token",JSON.stringify(e)),l(e.token)},token:i}}(),o=r.token,a=r.setToken;return o?n:(ua.error("You are not logged in!",{position:"bottom-right"}),t.createElement(Ro,{setToken:a}))}function ca(){var e=qe();return console.error(e),React.createElement("div",{id:"error-page"},React.createElement("h1",null,"Oops!"),React.createElement("p",null,"Sorry, an unexpected error has occurred."),React.createElement("p",null,React.createElement("i",null,e.statusText||e.message)))}ua.loading=(e,t)=>aa(e,ia("default",{isLoading:!0,autoClose:!1,closeOnClick:!1,closeButton:!1,draggable:!1,...t})),ua.promise=function(e,t,n){let r,{pending:o,error:a,success:i}=t;o&&(r=Mo(o)?ua.loading(o,n):ua.loading(o.render,{...n,...o}));const l={isLoading:null,autoClose:null,closeOnClick:null,closeButton:null,draggable:null},u=(e,t,o)=>{if(null==t)return void ua.dismiss(r);const a={type:e,...l,...n,data:o},i=Mo(t)?{render:t}:t;return r?ua.update(r,{...a,...i}):ua(i.render,{...a,...i}),o},s=Io(e)?e():e;return s.then((e=>u("success",i,e))).catch((e=>u("error",a,e))),s},ua.success=la("success"),ua.info=la("info"),ua.error=la("error"),ua.warning=la("warning"),ua.warn=ua.warning,ua.dark=(e,t)=>aa(e,ia("default",{theme:"dark",...t})),ua.dismiss=e=>{ea.size>0?Uo.emit(1,e):ta=ta.filter((t=>null!=e&&t.options.toastId!==e))},ua.clearWaitingQueue=function(e){return void 0===e&&(e={}),Uo.emit(5,e)},ua.isActive=e=>{let t=!1;return ea.forEach((n=>{n.isToastActive&&n.isToastActive(e)&&(t=!0)})),t},ua.update=function(e,t){void 0===t&&(t={}),setTimeout((()=>{const n=function(e,t){let{containerId:n}=t;const r=ea.get(n||Zo);return r&&r.getToast(e)}(e,t);if(n){const{props:r,content:o}=n,a={delay:100,...r,...t,toastId:t.toastId||e,updateId:ra()};a.toastId!==e&&(a.staleId=e);const i=a.render||o;delete a.render,aa(i,a)}}),0)},ua.done=e=>{ua.update(e,{progress:1})},ua.onChange=e=>(Uo.on(4,e),()=>{Uo.off(4,e)}),ua.POSITION={TOP_LEFT:"top-left",TOP_RIGHT:"top-right",TOP_CENTER:"top-center",BOTTOM_LEFT:"bottom-left",BOTTOM_RIGHT:"bottom-right",BOTTOM_CENTER:"bottom-center"},ua.TYPE={INFO:"info",SUCCESS:"success",WARNING:"warning",ERROR:"error",DEFAULT:"default"},Uo.on(2,(e=>{Zo=e.containerId||e,ea.set(Zo,e),ta.forEach((e=>{Uo.emit(0,e.content,e.options)})),ta=[]})).on(3,(e=>{ea.delete(e.containerId||e),0===ea.size&&Uo.off(0).off(1).off(5)}));var da,fa,pa=(da=[{path:"/",element:t.createElement(sa,null,t.createElement(go,null)),loader:function(e){return yo.apply(this,arguments)},errorElement:t.createElement(ca,null)}],function(t){const n=t.window?t.window:"undefined"!=typeof window?window:void 0,r=void 0!==n&&void 0!==n.document&&void 0!==n.document.createElement,o=!r;let i;if(l(t.routes.length>0,"You must provide a non-empty routes array to createRouter"),t.mapRouteProperties)i=t.mapRouteProperties;else if(t.detectErrorBoundary){let e=t.detectErrorBoundary;i=t=>({hasErrorBoundary:e(t)})}else i=X;let s,d={},f=m(t.routes,i,void 0,d),h=t.basename||"/",y=a({v7_normalizeFormMethod:!1,v7_prependBasename:!1},t.future),g=null,b=new Set,w=null,E=null,S=null,x=null!=t.hydrationData,k=v(f,t.history.location,h),C=null;if(null==k){let e=de(404,{pathname:t.history.location.pathname}),{matches:n,route:r}=ce(f);k=n,C={[r.id]:e}}let O,T,P=!(k.some((e=>e.route.lazy))||k.some((e=>e.route.loader))&&null==t.hydrationData),R={historyAction:t.history.action,location:t.history.location,matches:k,initialized:P,navigation:Q,restoreScrollPosition:null==t.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:t.hydrationData&&t.hydrationData.loaderData||{},actionData:t.hydrationData&&t.hydrationData.actionData||null,errors:t.hydrationData&&t.hydrationData.errors||C,fetchers:new Map,blockers:new Map},_=e.Pop,N=!1,D=!1,M=!1,I=[],j=[],z=new Map,A=0,F=-1,U=new Map,B=new Set,$=new Map,W=new Map,V=new Map,ee=!1;function te(e){R=a({},R,e),b.forEach((e=>e(R)))}function ne(n,r){var o,i;let l,u=null!=R.actionData&&null!=R.navigation.formMethod&&ye(R.navigation.formMethod)&&"loading"===R.navigation.state&&!0!==(null==(o=n.state)?void 0:o._isRedirect);l=r.actionData?Object.keys(r.actionData).length>0?r.actionData:null:u?R.actionData:null;let c=r.loaderData?ue(R.loaderData,r.loaderData,r.matches||[],r.errors):R.loaderData,d=R.blockers;d.size>0&&(d=new Map(d),d.forEach(((e,t)=>d.set(t,Y))));let p=!0===N||null!=R.navigation.formMethod&&ye(R.navigation.formMethod)&&!0!==(null==(i=n.state)?void 0:i._isRedirect);s&&(f=s,s=void 0),D||_===e.Pop||(_===e.Push?t.history.push(n,n.state):_===e.Replace&&t.history.replace(n,n.state)),te(a({},r,{actionData:l,loaderData:c,historyAction:_,location:n,initialized:!0,navigation:Q,revalidation:"idle",restoreScrollPosition:Ae(n,r.matches||R.matches),preventScrollReset:p,blockers:d})),_=e.Pop,N=!1,D=!1,M=!1,I=[],j=[]}async function ae(n,r,o){T&&T.abort(),T=null,_=n,D=!0===(o&&o.startUninterruptedRevalidation),function(e,t){if(w&&S){let n=ze(e,t);w[n]=S()}}(R.location,R.matches),N=!0===(o&&o.preventScrollReset);let l=s||f,u=o&&o.overrideNavigation,c=v(l,r,h);if(!c){let e=de(404,{pathname:r.pathname}),{matches:t,route:n}=ce(l);return je(),void ne(r,{matches:t,loaderData:{},errors:{[n.id]:e}})}if(R.initialized&&!M&&function(e,t){return e.pathname===t.pathname&&e.search===t.search&&(""===e.hash?""!==t.hash:e.hash===t.hash||""!==t.hash)}(R.location,r)&&!(o&&o.submission&&ye(o.submission.formMethod)))return void ne(r,{matches:c});T=new AbortController;let m,y,g=oe(t.history,r,T.signal,o&&o.submission);if(o&&o.pendingError)y={[se(c).route.id]:o.pendingError};else if(o&&o.submission&&ye(o.submission.formMethod)){let t=await async function(t,n,r,o,a){void 0===a&&(a={}),Oe();let l,u=function(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}(n,r);te({navigation:u});let s=Ee(o,n);if(s.route.action||s.route.lazy){if(l=await re("action",t,s,o,d,i,h),t.signal.aborted)return{shortCircuited:!0}}else l={type:p.error,error:de(405,{method:t.method,pathname:n.pathname,routeId:s.route.id})};if(ve(l)){let e;return e=a&&null!=a.replace?a.replace:l.location===R.location.pathname+R.location.search,await pe(R,l,{submission:r,replace:e}),{shortCircuited:!0}}if(me(l)){let t=se(o,s.route.id);return!0!==(a&&a.replace)&&(_=e.Push),{pendingActionData:{},pendingActionError:{[t.route.id]:l.error}}}if(he(l))throw de(400,{type:"defer-action"});return{pendingActionData:{[s.route.id]:l.data}}}(g,r,o.submission,c,{replace:o.replace});if(t.shortCircuited)return;m=t.pendingActionData,y=t.pendingActionError,u=xe(r,o.submission),g=new Request(g.url,{signal:g.signal})}let{shortCircuited:b,loaderData:E,errors:x}=await async function(e,n,r,o,i,l,u,c,d){let p=o||xe(n,i),m=i||l||Se(p),v=s||f,[y,g]=Z(t.history,R,r,m,n,M,I,j,$,B,v,h,c,d);if(je((e=>!(r&&r.some((t=>t.route.id===e)))||y&&y.some((t=>t.route.id===e)))),F=++A,0===y.length&&0===g.length){let e=_e();return ne(n,a({matches:r,loaderData:{},errors:d||null},c?{actionData:c}:{},e?{fetchers:new Map(R.fetchers)}:{})),{shortCircuited:!0}}if(!D){g.forEach((e=>{let t=R.fetchers.get(e.key),n=ke(void 0,t?t.data:void 0);R.fetchers.set(e.key,n)}));let e=c||R.actionData;te(a({navigation:p},e?0===Object.keys(e).length?{actionData:null}:{actionData:e}:{},g.length>0?{fetchers:new Map(R.fetchers)}:{}))}g.forEach((e=>{z.has(e.key)&&Re(e.key),e.controller&&z.set(e.key,e.controller)}));let b=()=>g.forEach((e=>Re(e.key)));T&&T.signal.addEventListener("abort",b);let{results:w,loaderResults:E,fetcherResults:S}=await we(R.matches,r,y,g,e);if(e.signal.aborted)return{shortCircuited:!0};T&&T.signal.removeEventListener("abort",b),g.forEach((e=>z.delete(e.key)));let x=fe(w);if(x){if(x.idx>=y.length){let e=g[x.idx-y.length].key;B.add(e)}return await pe(R,x.result,{replace:u}),{shortCircuited:!0}}let{loaderData:k,errors:C}=le(R,r,y,E,d,g,S,W);W.forEach(((e,t)=>{e.subscribe((n=>{(n||e.done)&&W.delete(t)}))}));let O=_e(),P=Ne(F);return a({loaderData:k,errors:C},O||P||g.length>0?{fetchers:new Map(R.fetchers)}:{})}(g,r,c,u,o&&o.submission,o&&o.fetcherSubmission,o&&o.replace,m,y);b||(T=null,ne(r,a({matches:c},m?{actionData:m}:{},{loaderData:E,errors:x})))}function ie(e){return R.fetchers.get(e)||q}async function pe(o,i,u){let{submission:s,fetcherSubmission:d,replace:f}=void 0===u?{}:u;i.revalidate&&(M=!0);let p=c(o.location,i.location,{_isRedirect:!0});if(l(p,"Expected a location on the redirect navigation"),r){let e=!1;if(i.reloadDocument)e=!0;else if(K.test(i.location)){const r=t.history.createURL(i.location);e=r.origin!==n.location.origin||null==L(r.pathname,h)}if(e)return void(f?n.location.replace(i.location):n.location.assign(i.location))}T=null;let m=!0===f?e.Replace:e.Push,{formMethod:v,formAction:y,formEncType:g}=o.navigation;!s&&!d&&v&&y&&g&&(s=Se(o.navigation));let b=s||d;if(H.has(i.status)&&b&&ye(b.formMethod))await ae(m,p,{submission:a({},b,{formAction:i.location}),preventScrollReset:N});else{let e=xe(p,s);await ae(m,p,{overrideNavigation:e,fetcherSubmission:d,preventScrollReset:N})}}async function we(e,n,r,o,a){let l=await Promise.all([...r.map((e=>re("loader",a,e,n,d,i,h))),...o.map((e=>e.matches&&e.match&&e.controller?re("loader",oe(t.history,e.path,e.controller.signal),e.match,e.matches,d,i,h):{type:p.error,error:de(404,{pathname:e.path})}))]),u=l.slice(0,r.length),s=l.slice(r.length);return await Promise.all([ge(e,r,u,u.map((()=>a.signal)),!1,R.loaderData),ge(e,o.map((e=>e.match)),s,o.map((e=>e.controller?e.controller.signal:null)),!0)]),{results:l,loaderResults:u,fetcherResults:s}}function Oe(){M=!0,I.push(...je()),$.forEach(((e,t)=>{z.has(t)&&(j.push(t),Re(t))}))}function Te(e,t,n){let r=se(R.matches,t);Pe(e),te({errors:{[r.route.id]:n},fetchers:new Map(R.fetchers)})}function Pe(e){let t=R.fetchers.get(e);!z.has(e)||t&&"loading"===t.state&&U.has(e)||Re(e),$.delete(e),U.delete(e),B.delete(e),R.fetchers.delete(e)}function Re(e){let t=z.get(e);l(t,"Expected fetch controller: "+e),t.abort(),z.delete(e)}function Le(e){for(let t of e){let e=Ce(ie(t).data);R.fetchers.set(t,e)}}function _e(){let e=[],t=!1;for(let n of B){let r=R.fetchers.get(n);l(r,"Expected fetcher: "+n),"loading"===r.state&&(B.delete(n),e.push(n),t=!0)}return Le(e),t}function Ne(e){let t=[];for(let[n,r]of U)if(r<e){let e=R.fetchers.get(n);l(e,"Expected fetcher: "+n),"loading"===e.state&&(Re(n),U.delete(n),t.push(n))}return Le(t),t.length>0}function De(e){R.blockers.delete(e),V.delete(e)}function Me(e,t){let n=R.blockers.get(e)||Y;l("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,"Invalid blocker state transition: "+n.state+" -> "+t.state);let r=new Map(R.blockers);r.set(e,t),te({blockers:r})}function Ie(e){let{currentLocation:t,nextLocation:n,historyAction:r}=e;if(0===V.size)return;V.size>1&&u(!1,"A router only supports one blocker at a time");let o=Array.from(V.entries()),[a,i]=o[o.length-1],l=R.blockers.get(a);return l&&"proceeding"===l.state?void 0:i({currentLocation:t,nextLocation:n,historyAction:r})?a:void 0}function je(e){let t=[];return W.forEach(((n,r)=>{e&&!e(r)||(n.cancel(),t.push(r),W.delete(r))})),t}function ze(e,t){if(E){let n=E(e,t.map((e=>function(e,t){let{route:n,pathname:r,params:o}=e;return{id:n.id,pathname:r,params:o,data:t[n.id],handle:n.handle}}(e,R.loaderData))));return n||e.key}return e.key}function Ae(e,t){if(w){let n=ze(e,t),r=w[n];if("number"==typeof r)return r}return null}return O={get basename(){return h},get state(){return R},get routes(){return f},initialize:function(){return g=t.history.listen((e=>{let{action:n,location:r,delta:o}=e;if(ee)return void(ee=!1);u(0===V.size||null!=o,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let a=Ie({currentLocation:R.location,nextLocation:r,historyAction:n});return a&&null!=o?(ee=!0,t.history.go(-1*o),void Me(a,{state:"blocked",location:r,proceed(){Me(a,{state:"proceeding",proceed:void 0,reset:void 0,location:r}),t.history.go(o)},reset(){let e=new Map(R.blockers);e.set(a,Y),te({blockers:e})}})):ae(n,r)})),R.initialized||ae(e.Pop,R.location),O},subscribe:function(e){return b.add(e),()=>b.delete(e)},enableScrollRestoration:function(e,t,n){if(w=e,S=t,E=n||null,!x&&R.navigation===Q){x=!0;let e=Ae(R.location,R.matches);null!=e&&te({restoreScrollPosition:e})}return()=>{w=null,S=null,E=null}},navigate:async function n(r,o){if("number"==typeof r)return void t.history.go(r);let i=G(R.location,R.matches,h,y.v7_prependBasename,r,null==o?void 0:o.fromRouteId,null==o?void 0:o.relative),{path:l,submission:u,error:s}=J(y.v7_normalizeFormMethod,!1,i,o),d=R.location,f=c(R.location,l,o&&o.state);f=a({},f,t.history.encodeLocation(f));let p=o&&null!=o.replace?o.replace:void 0,m=e.Push;!0===p?m=e.Replace:!1===p||null!=u&&ye(u.formMethod)&&u.formAction===R.location.pathname+R.location.search&&(m=e.Replace);let v=o&&"preventScrollReset"in o?!0===o.preventScrollReset:void 0,g=Ie({currentLocation:d,nextLocation:f,historyAction:m});if(!g)return await ae(m,f,{submission:u,pendingError:s,preventScrollReset:v,replace:o&&o.replace});Me(g,{state:"blocked",location:f,proceed(){Me(g,{state:"proceeding",proceed:void 0,reset:void 0,location:f}),n(r,o)},reset(){let e=new Map(R.blockers);e.set(g,Y),te({blockers:e})}})},fetch:function(e,n,r,u){if(o)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");z.has(e)&&Re(e);let c=s||f,p=G(R.location,R.matches,h,y.v7_prependBasename,r,n,null==u?void 0:u.relative),m=v(c,p,h);if(!m)return void Te(e,n,de(404,{pathname:p}));let{path:g,submission:b,error:w}=J(y.v7_normalizeFormMethod,!0,p,u);if(w)return void Te(e,n,w);let E=Ee(m,g);N=!0===(u&&u.preventScrollReset),b&&ye(b.formMethod)?async function(e,n,r,o,u,c){if(Oe(),$.delete(e),!o.route.action&&!o.route.lazy){let t=de(405,{method:c.formMethod,pathname:r,routeId:n});return void Te(e,n,t)}let p=function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(c,R.fetchers.get(e));R.fetchers.set(e,p),te({fetchers:new Map(R.fetchers)});let m=new AbortController,y=oe(t.history,r,m.signal,c);z.set(e,m);let g=A,b=await re("action",y,o,u,d,i,h);if(y.signal.aborted)return void(z.get(e)===m&&z.delete(e));if(ve(b)){if(z.delete(e),F>g){let t=Ce(void 0);return R.fetchers.set(e,t),void te({fetchers:new Map(R.fetchers)})}{B.add(e);let t=ke(c);return R.fetchers.set(e,t),te({fetchers:new Map(R.fetchers)}),pe(R,b,{fetcherSubmission:c})}}if(me(b))return void Te(e,n,b.error);if(he(b))throw de(400,{type:"defer-action"});let w=R.navigation.location||R.location,E=oe(t.history,w,m.signal),S=s||f,x="idle"!==R.navigation.state?v(S,R.navigation.location,h):R.matches;l(x,"Didn't find any matches after fetcher action");let k=++A;U.set(e,k);let C=ke(c,b.data);R.fetchers.set(e,C);let[O,P]=Z(t.history,R,x,c,w,M,I,j,$,B,S,h,{[o.route.id]:b.data},void 0);P.filter((t=>t.key!==e)).forEach((e=>{let t=e.key,n=R.fetchers.get(t),r=ke(void 0,n?n.data:void 0);R.fetchers.set(t,r),z.has(t)&&Re(t),e.controller&&z.set(t,e.controller)})),te({fetchers:new Map(R.fetchers)});let L=()=>P.forEach((e=>Re(e.key)));m.signal.addEventListener("abort",L);let{results:N,loaderResults:D,fetcherResults:V}=await we(R.matches,x,O,P,E);if(m.signal.aborted)return;m.signal.removeEventListener("abort",L),U.delete(e),z.delete(e),P.forEach((e=>z.delete(e.key)));let H=fe(N);if(H){if(H.idx>=O.length){let e=P[H.idx-O.length].key;B.add(e)}return pe(R,H.result)}let{loaderData:Q,errors:q}=le(R,R.matches,O,D,void 0,P,V,W);if(R.fetchers.has(e)){let t=Ce(b.data);R.fetchers.set(e,t)}let Y=Ne(k);"loading"===R.navigation.state&&k>F?(l(_,"Expected pending action"),T&&T.abort(),ne(R.navigation.location,{matches:x,loaderData:Q,errors:q,fetchers:new Map(R.fetchers)})):(te(a({errors:q,loaderData:ue(R.loaderData,Q,x,q)},Y||P.length>0?{fetchers:new Map(R.fetchers)}:{})),M=!1)}(e,n,g,E,m,b):($.set(e,{routeId:n,path:g}),async function(e,n,r,o,a,u){let s=R.fetchers.get(e),c=ke(u,s?s.data:void 0);R.fetchers.set(e,c),te({fetchers:new Map(R.fetchers)});let f=new AbortController,p=oe(t.history,r,f.signal);z.set(e,f);let m=A,v=await re("loader",p,o,a,d,i,h);if(he(v)&&(v=await be(v,p.signal,!0)||v),z.get(e)===f&&z.delete(e),p.signal.aborted)return;if(ve(v)){if(F>m){let t=Ce(void 0);return R.fetchers.set(e,t),void te({fetchers:new Map(R.fetchers)})}return B.add(e),void await pe(R,v)}if(me(v)){let t=se(R.matches,n);return R.fetchers.delete(e),void te({fetchers:new Map(R.fetchers),errors:{[t.route.id]:v.error}})}l(!he(v),"Unhandled fetcher deferred data");let y=Ce(v.data);R.fetchers.set(e,y),te({fetchers:new Map(R.fetchers)})}(e,n,g,E,m,b))},revalidate:function(){Oe(),te({revalidation:"loading"}),"submitting"!==R.navigation.state&&("idle"!==R.navigation.state?ae(_||R.historyAction,R.navigation.location,{overrideNavigation:R.navigation}):ae(R.historyAction,R.location,{startUninterruptedRevalidation:!0}))},createHref:e=>t.history.createHref(e),encodeLocation:e=>t.history.encodeLocation(e),getFetcher:ie,deleteFetcher:Pe,dispose:function(){g&&g(),b.clear(),T&&T.abort(),R.fetchers.forEach(((e,t)=>Pe(t))),R.blockers.forEach(((e,t)=>De(t)))},getBlocker:function(e,t){let n=R.blockers.get(e)||Y;return V.get(e)!==t&&V.set(e,t),n},deleteBlocker:De,_internalFetchControllers:z,_internalActiveDeferreds:W,_internalSetRoutes:function(e){d={},s=m(e,i,void 0,d)}},O}({basename:void 0,future:Je({},void 0,{v7_prependBasename:!0}),history:(fa={window:void 0},void 0===fa&&(fa={}),function(t,n,r,o){void 0===o&&(o={});let{window:u=document.defaultView,v5Compat:f=!1}=o,p=u.history,h=e.Pop,m=null,v=y();function y(){return(p.state||{idx:null}).idx}function g(){h=e.Pop;let t=y(),n=null==t?null:t-v;v=t,m&&m({action:h,location:w.location,delta:n})}function b(e){let t="null"!==u.location.origin?u.location.origin:u.location.href,n="string"==typeof e?e:d(e);return l(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==v&&(v=0,p.replaceState(a({},p.state,{idx:v}),""));let w={get action(){return h},get location(){return t(u,p)},listen(e){if(m)throw new Error("A history only accepts one active listener");return u.addEventListener(i,g),m=e,()=>{u.removeEventListener(i,g),m=null}},createHref:e=>n(u,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){h=e.Push;let o=c(w.location,t,n);r&&r(o,t),v=y()+1;let a=s(o,v),i=w.createHref(o);try{p.pushState(a,"",i)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;u.location.assign(i)}f&&m&&m({action:h,location:w.location,delta:1})},replace:function(t,n){h=e.Replace;let o=c(w.location,t,n);r&&r(o,t),v=y();let a=s(o,v),i=w.createHref(o);p.replaceState(a,"",i),f&&m&&m({action:h,location:w.location,delta:0})},go:e=>p.go(e)};return w}((function(e,t){let{pathname:n="/",search:r="",hash:o=""}=f(e.location.hash.substr(1));return n.startsWith("/")||n.startsWith(".")||(n="/"+n),c("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:d(t))}),(function(e,t){u("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),fa)),hydrationData:function(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=Je({},t,{errors:st(t.errors)})),t}(),routes:da,mapRouteProperties:function(e){let n={hasErrorBoundary:null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&Object.assign(n,{element:t.createElement(e.Component),Component:void 0}),e.ErrorBoundary&&Object.assign(n,{errorElement:t.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),n}}).initialize());r.createRoot(document.getElementById("root")).render(t.createElement(t.StrictMode,null,t.createElement(Ke,{router:pa})))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,